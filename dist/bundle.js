/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Builders/Builder.ts":
/*!*********************************!*\
  !*** ./src/Builders/Builder.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Production = exports.Building = void 0;\r\nconst Unit_1 = __webpack_require__(/*! ../Entity/Unit */ \"./src/Entity/Unit.ts\");\r\nclass Building {\r\n    constructor(callback, data) {\r\n        this.callback = callback;\r\n        this.data = data;\r\n    }\r\n    GetData() {\r\n        return this.callback();\r\n    }\r\n}\r\nexports.Building = Building;\r\nclass Production {\r\n    constructor(builder, city) {\r\n        this.builder = builder;\r\n        this.city = city;\r\n        this.prodLeft = builder.data.production;\r\n        this.timeLeftToBuild = Math.ceil(this.prodLeft / city.stats.prod);\r\n    }\r\n    Next() {\r\n        this.prodLeft -= this.city.stats.prod;\r\n        if (this.prodLeft <= 0) {\r\n            const building = this.builder.Build();\r\n            if (building instanceof Unit_1.default)\r\n                this.city.civ.AddEntity(building);\r\n            else\r\n                this.city.built.push(building);\r\n            this.city.RemoveAvailable(building.data.name);\r\n            return true;\r\n        }\r\n        this.timeLeftToBuild = Math.ceil(this.prodLeft / this.city.stats.prod);\r\n        return false;\r\n    }\r\n}\r\nexports.Production = Production;\r\n\n\n//# sourceURL=webpack:///./src/Builders/Builder.ts?");

/***/ }),

/***/ "./src/Builders/Buildings.ts":
/*!***********************************!*\
  !*** ./src/Builders/Buildings.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GetBuildingBuilder = exports.BuildingBuilder = void 0;\r\nconst Builder_1 = __webpack_require__(/*! ./Builder */ \"./src/Builders/Builder.ts\");\r\nconst UnitsJSON = __webpack_require__(/*! ../json/units.json */ \"./src/json/units.json\");\r\nfunction FindUnitInJSON(name) {\r\n    return UnitsJSON.find((e) => e.name === name);\r\n}\r\nclass BuildingBuilder {\r\n    constructor(data, city) {\r\n        this.data = data;\r\n        this.city = city;\r\n    }\r\n}\r\nexports.BuildingBuilder = BuildingBuilder;\r\nclass FarmBuilder extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({ food: 3 }), this.data);\r\n    }\r\n}\r\nclass LumberBuilder extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass CarpenterBuilder extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddResourceBuilding(\"wood\", -1);\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass HunterBuilder extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddAvailable(UnitsJSON.find((e) => e.name === \"Łucznik\"));\r\n        return new Builder_1.Building(() => ({ food: 2 }), this.data);\r\n    }\r\n}\r\nclass MillBuilder extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({ food: 2, prod: 2 }), this.data);\r\n    }\r\n}\r\nclass QuarryBuilder extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass WarriorBuilder extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddAvailable(UnitsJSON.find((e) => e.name === \"Łucznik\"));\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass IronWorksBuilder extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass BlacksmithBuilder extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddResourceBuilding(\"iron\", -1);\r\n        return new Builder_1.Building(() => ({ prod: 3 }), this.data);\r\n    }\r\n}\r\nclass CraftworkBuilder extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddAvailable(UnitsJSON.find((e) => e.name === \"Taran\"));\r\n        return new Builder_1.Building(() => ({ prod: 3 }), this.data);\r\n    }\r\n}\r\nclass Stables extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddResourceBuilding(\"horse\", -1);\r\n        this.city.AddAvailable(FindUnitInJSON(\"Konni\"));\r\n        return new Builder_1.Building(() => ({ food: 3 }), this.data);\r\n    }\r\n}\r\nclass Grange extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({ food: 3 }), this.data);\r\n    }\r\n}\r\nclass Estate extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({ food: -3 }), this.data);\r\n    }\r\n}\r\nclass Shop extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({ food: 1 }), this.data);\r\n    }\r\n}\r\nclass TradeDistrict extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddResourceBuilding(\"money\", 5);\r\n        this.city.AddResourceBuilding(\"wood\", -1);\r\n        this.city.AddResourceBuilding(\"stone\", -2);\r\n        this.city.AddResourceBuilding(\"iron\", -1);\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass Market extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddResourceBuilding(\"money\", 5);\r\n        return new Builder_1.Building(() => ({ food: 6 }), this.data);\r\n    }\r\n}\r\nclass Bank extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddResourceBuilding(\"money\", 2);\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass School extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({ prod: 2 }), this.data);\r\n    }\r\n}\r\nclass ScienceDistrict extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({ prod: 4 }), this.data);\r\n    }\r\n}\r\nclass Library extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({ prod: 3 }), this.data);\r\n    }\r\n}\r\nclass University extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddAvailable(FindUnitInJSON(\"Docent\"));\r\n        return new Builder_1.Building(() => ({ prod: 5 }), this.data);\r\n    }\r\n}\r\nclass FactoryDistrict extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddResourceBuilding(\"wood\", -1);\r\n        this.city.AddResourceBuilding(\"stone\", -1);\r\n        return new Builder_1.Building(() => ({ prod: 5 }), this.data);\r\n    }\r\n}\r\nclass Manufacture extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddResourceBuilding(\"iron\", -1);\r\n        return new Builder_1.Building(() => ({ prod: 3 }), this.data);\r\n    }\r\n}\r\nclass Factory extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddResourceBuilding(\"wood\", -1);\r\n        this.city.AddResourceBuilding(\"stone\", -1);\r\n        this.city.AddResourceBuilding(\"iron\", -1);\r\n        return new Builder_1.Building(() => ({ prod: 4 }), this.data);\r\n    }\r\n}\r\nclass Mason extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass Wall_1 extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass MilitaryDistrict extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({ prod: 5 }), this.data);\r\n    }\r\n}\r\nclass CatapultsWorkshop extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddAvailable(FindUnitInJSON(\"Katapulta\"));\r\n        this.city.AddResourceBuilding(\"wood\", -1);\r\n        this.city.AddResourceBuilding(\"iron\", -1);\r\n        return new Builder_1.Building(() => ({ prod: 5 }), this.data);\r\n    }\r\n}\r\nclass Engineer extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({ prod: 5 }), this.data);\r\n    }\r\n}\r\nclass Crossbowmen extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddAvailable(FindUnitInJSON(\"Kusznik\"));\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass Chariots extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddAvailable(FindUnitInJSON(\"Rydwany\"));\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass KnightSchool extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddAvailable(FindUnitInJSON(\"Rycerz\"));\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass Chemlab extends BuildingBuilder {\r\n    Build() {\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nclass CannonFactory extends BuildingBuilder {\r\n    Build() {\r\n        this.city.AddAvailable(FindUnitInJSON(\"Armata\"));\r\n        return new Builder_1.Building(() => ({}), this.data);\r\n    }\r\n}\r\nfunction GetBuildingBuilder(data, city) {\r\n    const Resolver = (ctor) => new ctor(data, city);\r\n    switch (data.name) {\r\n        case \"Farma\":\r\n            return Resolver(FarmBuilder);\r\n        case \"Drwal\":\r\n            return Resolver(LumberBuilder);\r\n        case \"Stolarz\":\r\n            return Resolver(CarpenterBuilder);\r\n        case \"Myśliwy\":\r\n            return Resolver(HunterBuilder);\r\n        case \"Młyn\":\r\n            return Resolver(MillBuilder);\r\n        case \"Kamieniołom\":\r\n            return Resolver(QuarryBuilder);\r\n        case \"Wojownik\":\r\n            return Resolver(WarriorBuilder);\r\n        case \"Huta\":\r\n            return Resolver(IronWorksBuilder);\r\n        case \"Kowal\":\r\n            return Resolver(BlacksmithBuilder);\r\n        case \"Zakład rzemieślniczy\":\r\n            return Resolver(CraftworkBuilder);\r\n        case \"Stajnia\":\r\n            return Resolver(Stables);\r\n        case \"Folwark\":\r\n            return Resolver(Grange);\r\n        case \"Dzielnica mieszkaniowia\":\r\n            return Resolver(Estate);\r\n        case \"Sklep\":\r\n            return Resolver(Shop);\r\n        case \"Dzielnica handlowa\":\r\n            return Resolver(TradeDistrict);\r\n        case \"Targowisko\":\r\n            return Resolver(Market);\r\n        case \"Bank\":\r\n            return Resolver(Bank);\r\n        case \"Szkoła\":\r\n            return Resolver(School);\r\n        case \"Dzielnica naukowa\":\r\n            return Resolver(ScienceDistrict);\r\n        case \"Biblioteka\":\r\n            return Resolver(Library);\r\n        case \"Uniwersytet\":\r\n            return Resolver(University);\r\n        case \"Dzielnica przemysłowa\":\r\n            return Resolver(FactoryDistrict);\r\n        case \"Manufaktura\":\r\n            return Resolver(Manufacture);\r\n        case \"Fabryka\":\r\n            return Resolver(Factory);\r\n        case \"Murarz\":\r\n            return Resolver(Mason);\r\n        case \"Mur 1\":\r\n            return Resolver(Wall_1);\r\n        case \"Dzielnica wojskowa\":\r\n            return Resolver(MilitaryDistrict);\r\n        case \"Warsztat katapult\":\r\n            return Resolver(CatapultsWorkshop);\r\n        case \"Inżynier\":\r\n            return Resolver(Engineer);\r\n        case \"Kusznicy\":\r\n            return Resolver(Crossbowmen);\r\n        case \"Rydwany\":\r\n            return Resolver(Chariots);\r\n        case \"Szkoła rycerska\":\r\n            return Resolver(KnightSchool);\r\n        case \"Pracownia chemiczna\":\r\n            return Resolver(Chemlab);\r\n        case \"Fabryka armat\":\r\n            return Resolver(CannonFactory);\r\n        default:\r\n            throw new Error(\"Building type not recognized ::GetBuildingBuilder\");\r\n    }\r\n}\r\nexports.GetBuildingBuilder = GetBuildingBuilder;\r\nconsole.warn(\"UPDATE MARKET (add slot for trader)\");\r\nconsole.warn(\"UPDATE Walls (add slot for city defense)\");\r\n\n\n//# sourceURL=webpack:///./src/Builders/Buildings.ts?");

/***/ }),

/***/ "./src/Builders/Units.ts":
/*!*******************************!*\
  !*** ./src/Builders/Units.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GetUnitBuilder = exports.UnitBuilder = void 0;\r\nconst City_1 = __webpack_require__(/*! ../Entity/City */ \"./src/Entity/City.ts\");\r\nconst Unit_1 = __webpack_require__(/*! ../Entity/Unit */ \"./src/Entity/Unit.ts\");\r\nconst TileModifier = __webpack_require__(/*! ../json/modifiers.json */ \"./src/json/modifiers.json\");\r\nfunction GetMeleeAttack(unit) {\r\n    const meleeAttack = () => {\r\n        const adj = unit.tile.GetAdj();\r\n        const filtered = adj.filter((t) => t.entity && t.entity.civ !== unit.civ);\r\n        unit.SelectActionsTiles(filtered, \"purple\");\r\n        unit.tileAction = (tile) => {\r\n            tile.entity.ReceiveDamage(unit.attack);\r\n            unit.walkingRange = 0;\r\n            unit.civ.NextAction();\r\n        };\r\n    };\r\n    return [this.CreateUnitAction(\"Atakuje\", meleeAttack)];\r\n}\r\nfunction GetRangeAttack(unit) {\r\n    const rangeAttack = () => {\r\n        const adj = unit.tile.GetAdj(3);\r\n        unit.SelectActionsTiles(adj.filter((t) => t.entity && t.entity.civ !== unit.civ), \"purple\");\r\n        unit.tileAction = (tile) => {\r\n            tile.entity.ReceiveDamage(unit.attack);\r\n            unit.walkingRange = 0;\r\n            unit.civ.NextAction();\r\n        };\r\n    };\r\n    return [this.CreateUnitAction(\"Atak zasięgowy\", rangeAttack)];\r\n}\r\nfunction GetBasicUnitActions(unit) {\r\n    return [\r\n        {\r\n            img: \"./img/zamek.png\",\r\n            desc: \"Czekaj\",\r\n            execute: () => {\r\n                unit.walkingRange = 0;\r\n                unit.Deselect();\r\n                unit.civ.NextAction();\r\n            },\r\n        },\r\n        {\r\n            img: \"./img/zamek.png\",\r\n            desc: \"Rozwiąż jednostke\",\r\n            execute: () => {\r\n                unit.civ.RemoveEntity(unit);\r\n            },\r\n        },\r\n    ];\r\n}\r\nclass UnitBuilder {\r\n    constructor(data, civ, dest) {\r\n        this.data = data;\r\n        this.civ = civ;\r\n        this.dest = dest;\r\n    }\r\n    GetUnit(img) {\r\n        return new Unit_1.default(this.dest, this.assets[img], this.civ, this.data);\r\n    }\r\n    OnBeforeBuild(unit) { }\r\n    CreateUnitAction(desc, callback, img = \"./img/zamek.png\") {\r\n        return { desc, execute: callback, img };\r\n    }\r\n    Build() {\r\n        const unit = this.GetUnit(this.GetUnitName());\r\n        unit.actions = [...GetBasicUnitActions(unit), ...this.GetUnitActions(unit)];\r\n        this.OnBeforeBuild(unit);\r\n        return unit;\r\n    }\r\n    get assets() {\r\n        return this.civ.game.assets;\r\n    }\r\n}\r\nexports.UnitBuilder = UnitBuilder;\r\nclass SettlerBuilder extends UnitBuilder {\r\n    GetUnitActions(unit) {\r\n        const buildCityCallback = () => {\r\n            if (unit.tile.modifier)\r\n                return;\r\n            unit.civ.RemoveEntity(unit);\r\n            unit.civ.AddEntity(new City_1.default(unit.tile, unit.civ.game.assets.Miasto, unit.civ));\r\n        };\r\n        return [this.CreateUnitAction(\"Zbuduj miasto\", buildCityCallback)];\r\n    }\r\n    GetUnitName() {\r\n        return \"Osadnik\";\r\n    }\r\n}\r\nclass WorkerBuilder extends UnitBuilder {\r\n    GetUnitActions() {\r\n        return [];\r\n    }\r\n    OnBeforeBuild(unit) {\r\n        unit.additionalActionsCallback = (tile) => {\r\n            var _a, _b, _c;\r\n            const actions = [];\r\n            if (!tile.owner)\r\n                return actions;\r\n            if (tile.owner.civ !== unit.civ)\r\n                return actions;\r\n            if (!tile.modifier)\r\n                return actions;\r\n            switch (tile.modifier) {\r\n                case TileModifier.forest:\r\n                    if (!((_a = tile.owner) === null || _a === void 0 ? void 0 : _a.built.find((e) => e.data.name === \"Drwal\")))\r\n                        break;\r\n                    actions.push({\r\n                        desc: \"Buduj Tartak\",\r\n                        img: \"./img/modifiers/sawmill.png\",\r\n                        execute: () => {\r\n                            unit.action = {\r\n                                turns: 3,\r\n                                execute() {\r\n                                    tile.modifier = TileModifier.sawmill;\r\n                                    tile.owner.AddResourceBuilding(\"wood\", 2);\r\n                                },\r\n                            };\r\n                        },\r\n                    });\r\n                    break;\r\n                case TileModifier.iron:\r\n                    if (!((_b = tile.owner) === null || _b === void 0 ? void 0 : _b.built.find((e) => e.data.name === \"Huta\")))\r\n                        break;\r\n                    actions.push({\r\n                        desc: \"Buduj kopalnie żelaza\",\r\n                        img: \"./img/modifiers/mine.png\",\r\n                        execute: () => {\r\n                            unit.action = {\r\n                                turns: 3,\r\n                                execute() {\r\n                                    (tile.modifier = TileModifier.mine),\r\n                                        tile.owner.AddResourceBuilding(\"iron\", 2);\r\n                                },\r\n                            };\r\n                        },\r\n                    });\r\n                    break;\r\n                case TileModifier.stone:\r\n                    if (!((_c = tile.owner) === null || _c === void 0 ? void 0 : _c.built.find((e) => e.data.name === \"Kamieniołom\")))\r\n                        break;\r\n                    actions.push({\r\n                        desc: \"Buduj Kamieniołom\",\r\n                        img: \"./img/modifiers/stonemine.png\",\r\n                        execute: () => {\r\n                            unit.action = {\r\n                                turns: 3,\r\n                                execute() {\r\n                                    (tile.modifier = TileModifier.stonemine),\r\n                                        tile.owner.AddResourceBuilding(\"stone\", 2);\r\n                                },\r\n                            };\r\n                        },\r\n                    });\r\n                    break;\r\n            }\r\n            return actions;\r\n        };\r\n    }\r\n    GetUnitName() {\r\n        return \"Robotnik\";\r\n    }\r\n}\r\nclass ArcherBuilder extends UnitBuilder {\r\n    GetUnitName() {\r\n        return \"Lucznik\";\r\n    }\r\n    GetUnitActions(unit) {\r\n        return GetRangeAttack(unit);\r\n    }\r\n}\r\nclass DocentBuilder extends UnitBuilder {\r\n    GetUnitName() {\r\n        return \"Docent\";\r\n    }\r\n    GetUnitActions(unit) {\r\n        const findCrystal = (() => {\r\n            let tile;\r\n            return function () {\r\n                if (!tile)\r\n                    tile = unit.map.tilesArray.find((t) => t.modifier === TileModifier.mineral);\r\n                const dist = tile.FindPath(unit.tile).length - 1;\r\n                unit.civ.game.ui.appendToActionLog(`Dystans do minerału: ${dist}`);\r\n                unit.walkingRange = 0;\r\n                unit.civ.NextAction();\r\n            };\r\n        })();\r\n        unit.additionalActionsCallback = (tile) => {\r\n            const actions = [];\r\n            console.warn(\"DODAC DO ONLINE\");\r\n            if (tile.modifier === TileModifier.mineral) {\r\n                tile.displayModifier = true;\r\n                unit.civ.game.ui.appendToActionLog(\"Minerał fiutta odnaleziony!\");\r\n                actions.push({\r\n                    desc: \"Zacznij wydobywać minerał\",\r\n                    img: \"./img/modifiers/mineral.png\",\r\n                    execute() {\r\n                        unit.civ.resources.mineral += 0.1;\r\n                        unit.walkingRange = 0;\r\n                        unit.civ.NextAction();\r\n                    },\r\n                });\r\n            }\r\n            return actions;\r\n        };\r\n        return [\r\n            this.CreateUnitAction(\"Szukaj kryształu\", findCrystal, \"./img/modifiers/mineral.png\"),\r\n        ];\r\n    }\r\n}\r\nclass WarriorBuilder extends UnitBuilder {\r\n    GetUnitName() {\r\n        return \"Wojownik\";\r\n    }\r\n    GetUnitActions(unit) {\r\n        return GetMeleeAttack(unit);\r\n    }\r\n}\r\nclass TaranBuilder extends UnitBuilder {\r\n    GetUnitName() {\r\n        return \"Taran\";\r\n    }\r\n    GetUnitActions(unit) {\r\n        return [];\r\n    }\r\n}\r\nclass CatapultBuilder extends UnitBuilder {\r\n    GetUnitName() {\r\n        return \"Katapulta\";\r\n    }\r\n    GetUnitActions(unit) {\r\n        const bombardAttack = () => {\r\n            const adj = unit.tile.GetAdj(3);\r\n            const filtered = adj.filter((t) => t.city && t.city.civ !== unit.civ);\r\n            unit.SelectActionsTiles(filtered, \"purple\");\r\n            unit.tileAction = (tile) => {\r\n                const city = tile.city;\r\n                unit.walkingRange = 0;\r\n                unit.civ.NextAction();\r\n            };\r\n        };\r\n        return [this.CreateUnitAction(\"Atakuj miasto\", bombardAttack)];\r\n    }\r\n}\r\nclass CannonBuilder extends UnitBuilder {\r\n    GetUnitName() {\r\n        return \"Armata\";\r\n    }\r\n    GetUnitActions(unit) {\r\n        const bombardAttack = () => {\r\n            const adj = unit.tile.GetAdj(3);\r\n            const filtered = adj.filter((t) => t.city && t.city.civ !== unit.civ);\r\n            unit.SelectActionsTiles(filtered, \"purple\");\r\n            unit.tileAction = (tile) => {\r\n                const city = tile.city;\r\n                unit.walkingRange = 0;\r\n                unit.civ.NextAction();\r\n            };\r\n        };\r\n        return [this.CreateUnitAction(\"Atakuj miasto\", bombardAttack)];\r\n    }\r\n}\r\nclass CavalryBuilder extends UnitBuilder {\r\n    GetUnitName() {\r\n        return \"Konny\";\r\n    }\r\n    GetUnitActions(unit) {\r\n        return GetMeleeAttack(unit);\r\n    }\r\n}\r\nclass KnightBuilder extends UnitBuilder {\r\n    GetUnitName() {\r\n        return \"Rycerz\";\r\n    }\r\n    GetUnitActions(unit) {\r\n        return GetMeleeAttack(unit);\r\n    }\r\n}\r\nclass CrossbowBuilder extends UnitBuilder {\r\n    GetUnitName() {\r\n        return \"Kusznik\";\r\n    }\r\n    GetUnitActions(unit) {\r\n        return GetRangeAttack(unit);\r\n    }\r\n}\r\nclass ChariotBuilder extends UnitBuilder {\r\n    GetUnitName() {\r\n        return \"Rydwan\";\r\n    }\r\n    GetUnitActions(unit) {\r\n        return GetMeleeAttack(unit);\r\n    }\r\n}\r\nfunction GetUnitBuilder(data, civ, tile) {\r\n    const Resolver = (ctor) => new ctor(data, civ, tile);\r\n    switch (data.name) {\r\n        case \"Osadnik\":\r\n            return Resolver(SettlerBuilder);\r\n        case \"Robotnik\":\r\n            return Resolver(WorkerBuilder);\r\n        case \"Łucznik\":\r\n            return Resolver(ArcherBuilder);\r\n        case \"Docent\":\r\n            return Resolver(DocentBuilder);\r\n        case \"Wojownik\":\r\n            return Resolver(WarriorBuilder);\r\n        case \"Kusznik\":\r\n            return Resolver(CrossbowBuilder);\r\n        case \"Rydwan\":\r\n            return Resolver(ChariotBuilder);\r\n        case \"Rycerz\":\r\n            return Resolver(KnightBuilder);\r\n        case \"Katapulta\":\r\n            return Resolver(CatapultBuilder);\r\n        case \"Armata\":\r\n            return Resolver(CannonBuilder);\r\n        case \"Konny\":\r\n            return Resolver(CavalryBuilder);\r\n        case \"Taran\":\r\n            return Resolver(TaranBuilder);\r\n        default:\r\n            throw new Error(\"Unit type not recognized ::GetUnitBuilder\");\r\n    }\r\n}\r\nexports.GetUnitBuilder = GetUnitBuilder;\r\n\n\n//# sourceURL=webpack:///./src/Builders/Units.ts?");

/***/ }),

/***/ "./src/Civiliziations/Civilization.ts":
/*!********************************************!*\
  !*** ./src/Civiliziations/Civilization.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Civilization = void 0;\r\nconst Unit_1 = __webpack_require__(/*! ../Entity/Unit */ \"./src/Entity/Unit.ts\");\r\nconst City_1 = __webpack_require__(/*! ../Entity/City */ \"./src/Entity/City.ts\");\r\nclass Civilization {\r\n    constructor(game, name, color, main = false) {\r\n        this.game = game;\r\n        this.name = name;\r\n        this.color = color;\r\n        this.main = main;\r\n        this.ready = false;\r\n        this.queue = [];\r\n        this.units = [];\r\n        this.cities = [];\r\n        this.resources = {\r\n            iron: 1000,\r\n            stone: 1000,\r\n            wood: 1000,\r\n            money: 1000,\r\n            horse: 1000,\r\n            mineral: 0,\r\n        };\r\n        this.id = Civilization.id++;\r\n    }\r\n    AddEntity(e) {\r\n        if (e instanceof Unit_1.default)\r\n            this.units.push(e);\r\n        else if (e instanceof City_1.default)\r\n            this.cities.push(e);\r\n        if (this.main)\r\n            e.Select();\r\n    }\r\n    RemoveEntity(e) {\r\n        e.Deselect();\r\n        delete e.tile.entity;\r\n        if (e instanceof Unit_1.default)\r\n            this.units = this.units.filter((t) => t !== e);\r\n        else\r\n            this.cities = this.cities.filter((t) => t !== e);\r\n        this.queue = this.queue.filter((t) => t !== e);\r\n    }\r\n    NextTurn() {\r\n        this.ready = false;\r\n        const res = this.GetResourceIncome();\r\n        for (const key in res) {\r\n            if (key === \"mineral\")\r\n                continue;\r\n            this.resources[key] += res[key];\r\n        }\r\n        [...this.units, ...this.cities].forEach((e) => e.NextTurn());\r\n    }\r\n    NextAction() {\r\n        if (this.queue.length === 0) {\r\n            this.DeselectLastEntity();\r\n            this.ready = true;\r\n        }\r\n        else {\r\n            const e = this.queue.pop();\r\n            if (this.main && e)\r\n                e.Select();\r\n        }\r\n    }\r\n    Update() {\r\n        for (let i = 0; i < this.cities.length; i++)\r\n            this.cities[i].Update();\r\n        for (let i = 0; i < this.units.length; i++)\r\n            this.units[i].Update();\r\n    }\r\n    RemoveFromQueue(e) {\r\n        this.queue = this.queue.filter((t) => t !== e);\r\n    }\r\n    DeselectLastEntity() {\r\n        var _a, _b;\r\n        (_a = this.units.find((u) => u.selected)) === null || _a === void 0 ? void 0 : _a.Deselect();\r\n        (_b = this.cities.find((u) => u.selected)) === null || _b === void 0 ? void 0 : _b.Deselect();\r\n    }\r\n    GetResourceIncome() {\r\n        return this.cities.reduce((p, c) => {\r\n            const res = c.stats;\r\n            for (const k in res) {\r\n                if (!p[k])\r\n                    p[k] = 0;\r\n                p[k] += res[k];\r\n            }\r\n            return p;\r\n        }, { mineral: this.resources.mineral });\r\n    }\r\n}\r\nexports.Civilization = Civilization;\r\nCivilization.id = 0;\r\n\n\n//# sourceURL=webpack:///./src/Civiliziations/Civilization.ts?");

/***/ }),

/***/ "./src/Entity/City.ts":
/*!****************************!*\
  !*** ./src/Entity/City.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Builder_1 = __webpack_require__(/*! ../Builders/Builder */ \"./src/Builders/Builder.ts\");\r\nconst BuildingsJSON = __webpack_require__(/*! ../json/citybuilding.json */ \"./src/json/citybuilding.json\");\r\nconst UnitsJSON = __webpack_require__(/*! ../json/units.json */ \"./src/json/units.json\");\r\nconst Tile_1 = __webpack_require__(/*! ../Tile */ \"./src/Tile.ts\");\r\nconst Entity_1 = __webpack_require__(/*! ./Entity */ \"./src/Entity/Entity.ts\");\r\nclass City extends Entity_1.Entity {\r\n    constructor(tile, img, civ) {\r\n        super(tile, img, civ);\r\n        this._stats = { pop: 1, food: 6 };\r\n        this.tiles = [];\r\n        this.timeLeftToGrow = 0;\r\n        this.growthFactor = 0;\r\n        this.maxCitizens = this._stats.pop;\r\n        this.built = [];\r\n        this._available = [\r\n            BuildingsJSON[0],\r\n            UnitsJSON[0],\r\n            UnitsJSON[1],\r\n            BuildingsJSON.find((e) => e.name === \"Kamieniołom\"),\r\n        ];\r\n        this.assignedCitizens = {\r\n            prod: 0,\r\n            food: 0,\r\n            horse: 0,\r\n            iron: 0,\r\n            money: 0,\r\n            stone: 0,\r\n            wood: 0,\r\n        };\r\n        this.resourceBuildings = {\r\n            iron: 0,\r\n            money: 0,\r\n            stone: 0,\r\n            wood: 0,\r\n            horse: 0,\r\n        };\r\n        tile.modifier = undefined;\r\n        [tile, ...tile.GetAdj()].forEach((e) => (e.owner = this));\r\n        this.tiles = tile.GetAdj();\r\n        this.timeLeftToGrow = 0;\r\n        this.name = \"Name\";\r\n        tile.city = this;\r\n    }\r\n    Update() {\r\n        super.Update();\r\n        this.map.c.fillStyle = \"black\";\r\n        this.map.c.fillRect(this.pos.x, this.pos.y - 40, Tile_1.default.size * 2, 60);\r\n        this.map.c.fillStyle = \"white\";\r\n        this.map.c.font = \"40px Arial\";\r\n        this.map.c.fillText(this.stats.pop + \" \" + this.name, this.pos.x, this.pos.y - 10, 60);\r\n    }\r\n    Select() {\r\n        this.civ.DeselectLastEntity();\r\n        this.civ.game.ui.ShowCity(this);\r\n        this.civ.game.map.Focus(this.pos);\r\n        this.selected = true;\r\n    }\r\n    Deselect() {\r\n        this.civ.game.ui.HideCity();\r\n        this.selected = false;\r\n    }\r\n    isFree() {\r\n        return this.production === undefined && this.available.length > 0;\r\n    }\r\n    OnTurn() {\r\n        var _a;\r\n        if (this.growthFactor !== 0)\r\n            this.timeLeftToGrow--;\r\n        if (this.timeLeftToGrow <= 0) {\r\n            this._stats.pop += this.growthFactor;\r\n            if (this.maxCitizens < this._stats.pop && this.growthFactor > 0) {\r\n                this.maxCitizens = this._stats.pop;\r\n                const rtiles = this.tiles.map((t) => t.GetAdj().filter((t) => !t.owner));\r\n                const picked = this.map.RandomItem(rtiles.flat());\r\n                picked.owner = this;\r\n                this.tiles.push(picked);\r\n            }\r\n            this.SetTurnsAndGrowthFactor();\r\n        }\r\n        if ((_a = this.production) === null || _a === void 0 ? void 0 : _a.Next())\r\n            delete this.production;\r\n        BuildingsJSON.forEach((building) => {\r\n            if (this.built.find((b) => b.data.name === building.name))\r\n                return;\r\n            if (this.available.find((a) => a.name === building.name))\r\n                return;\r\n            const reqs = building.requires;\r\n            if (!reqs.every((r) => this.built.find((b) => b.data.name === r)))\r\n                return;\r\n            this.AddAvailable(building);\r\n        });\r\n        this.selected && this.Select();\r\n    }\r\n    Build(builder) {\r\n        const canBuild = Object.keys(builder.data.cost).every((e) => this.civ.resources[e] >= builder.data.cost[e]);\r\n        if (!canBuild)\r\n            return;\r\n        for (const key in builder.data.cost)\r\n            this.civ.resources[key] -= builder.data.cost[key];\r\n        this.production = new Builder_1.Production(builder, this);\r\n        this.Select();\r\n        this.civ.NextAction();\r\n    }\r\n    AddResourceBuilding(res, value = 1) {\r\n        this.resourceBuildings[res] += value;\r\n        this.civ.game.ui.UpdateResources(this.civ);\r\n    }\r\n    AddAvailable(e) {\r\n        if (!e)\r\n            throw new Error(\"Available product is undefined\");\r\n        this.available.push(e);\r\n    }\r\n    RemoveAvailable(name) {\r\n        this._available = this._available.filter((t) => t.name !== name);\r\n    }\r\n    SetCitizen(action, key) {\r\n        if (action === \"inc\" && this.assignedCitizenCount >= this.stats.pop)\r\n            return;\r\n        else if (action === \"dec\" && this.assignedCitizenCount === 0)\r\n            return;\r\n        if (key !== \"food\" && key !== \"money\" && key !== \"prod\")\r\n            if (!this.resourceBuildings[key])\r\n                return;\r\n        const value = action === \"inc\" ? 1 : -1;\r\n        this.assignedCitizens[key] += value;\r\n        this.Select();\r\n    }\r\n    ReceiveDamage(amount) {\r\n    }\r\n    get stats() {\r\n        const res = {};\r\n        this.built.forEach((e) => {\r\n            const data = e.GetData();\r\n            Object.entries(data).forEach(([k, v]) => {\r\n                if (!res[k])\r\n                    res[k] = 0;\r\n                res[k] += v;\r\n            });\r\n        });\r\n        Object.entries(this.resourceBuildings).forEach(([k, v]) => {\r\n            if (!res[k])\r\n                res[k] = 0;\r\n            res[k] += v;\r\n        });\r\n        Object.entries(this.assignedCitizens).forEach(([k, v]) => {\r\n            if (!res[k])\r\n                res[k] = 0;\r\n            res[k] += Math.floor(v / 2);\r\n        });\r\n        res.food += this._stats.food;\r\n        res.prod += this._stats.pop;\r\n        res.pop = this._stats.pop;\r\n        res.money += this._stats.pop;\r\n        return res;\r\n    }\r\n    SetTurnsAndGrowthFactor() {\r\n        const { pop, food } = this.stats;\r\n        const consumption = food - pop * 2;\r\n        this.growthFactor = 0;\r\n        if (consumption < 0) {\r\n            this.timeLeftToGrow = 1;\r\n            this.growthFactor = -1;\r\n        }\r\n        else if (consumption > 2) {\r\n            this.timeLeftToGrow = City.TimeToGrow;\r\n            this.growthFactor = 1;\r\n        }\r\n    }\r\n    get rawStats() {\r\n        return this._stats;\r\n    }\r\n    get available() {\r\n        return this._available;\r\n    }\r\n    get assignedCitizenCount() {\r\n        return Object.values(this.assignedCitizens).reduce((p, c) => p + c);\r\n    }\r\n}\r\nexports.default = City;\r\nCity.TimeToGrow = 5;\r\n\n\n//# sourceURL=webpack:///./src/Entity/City.ts?");

/***/ }),

/***/ "./src/Entity/Entity.ts":
/*!******************************!*\
  !*** ./src/Entity/Entity.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Entity = void 0;\r\nconst Tile_1 = __webpack_require__(/*! ../Tile */ \"./src/Tile.ts\");\r\nclass Entity {\r\n    constructor(_tile, img, civ) {\r\n        this._tile = _tile;\r\n        this.img = img;\r\n        this.civ = civ;\r\n        this.selected = false;\r\n        this.pos = {\r\n            x: Math.floor(this.tile.pos.x - Tile_1.default.size),\r\n            y: Math.floor(this.tile.pos.y - Tile_1.default.size * 2),\r\n            size: Tile_1.default.size * 2,\r\n        };\r\n        civ.queue.push(this);\r\n    }\r\n    Update() {\r\n        this.Draw();\r\n    }\r\n    NextTurn() {\r\n        this.OnTurn();\r\n        if (this.isFree())\r\n            this.civ.queue.push(this);\r\n        if (this.selected && this.civ.main)\r\n            this.Select();\r\n    }\r\n    Draw() {\r\n        this.map.c.drawImage(this.img, this.pos.x, this.pos.y, this.pos.size, this.pos.size);\r\n    }\r\n    get map() {\r\n        return this.civ.game.map;\r\n    }\r\n    set tile(t) {\r\n        this._tile = t;\r\n        this.pos = {\r\n            x: t.pos.x - Tile_1.default.size,\r\n            y: t.pos.y - Tile_1.default.size * 2,\r\n            size: Tile_1.default.size * 2,\r\n        };\r\n    }\r\n    get tile() {\r\n        return this._tile;\r\n    }\r\n}\r\nexports.Entity = Entity;\r\n\n\n//# sourceURL=webpack:///./src/Entity/Entity.ts?");

/***/ }),

/***/ "./src/Entity/Unit.ts":
/*!****************************!*\
  !*** ./src/Entity/Unit.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Tile_1 = __webpack_require__(/*! ../Tile */ \"./src/Tile.ts\");\r\nconst Entity_1 = __webpack_require__(/*! ./Entity */ \"./src/Entity/Entity.ts\");\r\nclass Unit extends Entity_1.Entity {\r\n    constructor(tile, img, civ, data) {\r\n        super(tile, img, civ);\r\n        this.data = data;\r\n        this._actions = [];\r\n        this.walkingRange = 2;\r\n        this._actionTiles = [];\r\n        tile.entity = this;\r\n        this._health = data.health;\r\n        this.fullHealth = data.health;\r\n        this.defense = data.defense;\r\n        this.attack = data.attack;\r\n    }\r\n    Update() {\r\n        super.Update();\r\n        const c = this.map.c;\r\n        c.fillStyle = \"black\";\r\n        c.font = \"30px Arial\";\r\n        const x = this.pos.x + this.pos.size / 4, y = this.pos.y - 30, w = Tile_1.default.sizet, h = 30;\r\n        c.fillRect(x, y, w, h);\r\n        c.fillStyle = \"white\";\r\n        c.textAlign = \"left\";\r\n        c.fillText(`${this.health}/${this.fullHealth}`, x, y + 30, w);\r\n    }\r\n    Move(tile) {\r\n        if (!this.tilesInRange || !this.tilesInRange.has(tile))\r\n            return;\r\n        if (tile.entity) {\r\n            tile.entity.civ.RemoveEntity(tile.entity);\r\n        }\r\n        delete this.tile.entity;\r\n        this.tile = tile;\r\n        tile.entity = this;\r\n        this.walkingRange -= this.tilesInRange.get(tile);\r\n        this.Deselect();\r\n        if (this.walkingRange <= 0) {\r\n            this.civ.RemoveFromQueue(this);\r\n            this.civ.NextAction();\r\n        }\r\n        else\r\n            this.Select();\r\n        this.action && delete this.action;\r\n    }\r\n    OnTurn() {\r\n        this.walkingRange = Unit.walkingRange;\r\n        this.action && --this.action.turns === 0\r\n            ? (() => {\r\n                this.action.execute();\r\n                delete this.action;\r\n            })()\r\n            : null;\r\n    }\r\n    isFree() {\r\n        return this.walkingRange > 0;\r\n    }\r\n    Select() {\r\n        if (this.selected && this.tile.city) {\r\n            this.tile.city.Select();\r\n            return;\r\n        }\r\n        this.civ.DeselectLastEntity();\r\n        this.map.Focus(this.pos);\r\n        this.map.game.ui.ShowUnit(this);\r\n        this.tilesInRange = this.TilesInWalkingRange();\r\n        [...this.tilesInRange.keys()].forEach((e) => e.Select({ color: \"orange\", entity: this }));\r\n        this.selected = true;\r\n    }\r\n    Deselect() {\r\n        if (this.tilesInRange)\r\n            [...this.tilesInRange.keys()].forEach((e) => e.Deselect());\r\n        delete this.tilesInRange;\r\n        this.selected = false;\r\n        this.actionTiles.forEach((t) => t.Deselect());\r\n        this.map.game.ui.HideUnit();\r\n    }\r\n    TilesInWalkingRange() {\r\n        const resmap = new globalThis.Map();\r\n        const Sum = (total = 0, tile = this.tile) => {\r\n            if (tile.type === Tile_1.TileType.Woda)\r\n                return;\r\n            if (tile.entity && tile.entity !== this)\r\n                return;\r\n            if (resmap.has(tile) && total >= resmap.get(tile))\r\n                return;\r\n            if (total > this.walkingRange)\r\n                return;\r\n            if (tile !== this.tile)\r\n                resmap.set(tile, total);\r\n            for (const adj of tile.GetAdj()) {\r\n                Sum(total + tile.weight, adj);\r\n            }\r\n        };\r\n        Sum();\r\n        return resmap;\r\n    }\r\n    AcceptTile(tile) {\r\n        if (this.actionTiles.includes(tile))\r\n            this.tileAction(tile);\r\n        else\r\n            this.Move(tile);\r\n        this.actionTiles.splice(0).forEach((t) => t.Deselect());\r\n    }\r\n    SelectActionsTiles(tiles, color) {\r\n        this._actionTiles = tiles;\r\n        tiles.forEach((t) => t.Select({ entity: this, color }));\r\n    }\r\n    ReceiveDamage(amount) {\r\n        this._health -= +(amount / this.defense).toFixed(2);\r\n        if (this.health <= 0)\r\n            this.civ.RemoveEntity(this);\r\n    }\r\n    get actions() {\r\n        var _a;\r\n        const additionalActions = ((_a = this.additionalActionsCallback) === null || _a === void 0 ? void 0 : _a.call(this, this.tile)) || [];\r\n        return [...this._actions, ...additionalActions];\r\n    }\r\n    set actions(v) {\r\n        this._actions = v;\r\n    }\r\n    get actionTiles() {\r\n        return this._actionTiles;\r\n    }\r\n    get health() {\r\n        return this._health;\r\n    }\r\n}\r\nexports.default = Unit;\r\nUnit.walkingRange = 2;\r\n\n\n//# sourceURL=webpack:///./src/Entity/Unit.ts?");

/***/ }),

/***/ "./src/Map.ts":
/*!********************!*\
  !*** ./src/Map.ts ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Tile_1 = __webpack_require__(/*! ./Tile */ \"./src/Tile.ts\");\r\nconst TileModifier = __webpack_require__(/*! ./json/modifiers.json */ \"./src/json/modifiers.json\");\r\nclass Map {\r\n    constructor(game, x, y) {\r\n        this.game = game;\r\n        this.scale = { x: 1, y: 1 };\r\n        this.translate = { x: 0, y: 0 };\r\n        this.translateSpeed = { x: 0, y: 0 };\r\n        this.translateMult = 1;\r\n        this.isMouseDown = false;\r\n        this.isMouseDragging = false;\r\n        this.size = { x, y };\r\n        this.canvas = game.canvas;\r\n        this.c = game.c;\r\n        this.canvas.addEventListener(\"click\", (ev) => this.onClick(ev));\r\n        window.addEventListener(\"keydown\", (ev) => this.onKeyDown(ev));\r\n        window.addEventListener(\"keyup\", (ev) => this.onKeyUp(ev));\r\n        window.addEventListener(\"keypress\", (ev) => this.onKeyPress(ev));\r\n        this.canvas.addEventListener(\"mousedown\", (ev) => this.onMouseDown(ev));\r\n        this.canvas.addEventListener(\"mouseup\", (ev) => this.onMouseUp(ev));\r\n        this.canvas.addEventListener(\"mousemove\", (ev) => this.onMouseMove(ev));\r\n        this.canvas.addEventListener(\"wheel\", (ev) => this.onWheel(ev));\r\n        this.tiles = new Array(y).fill(0).map(() => new Array(x));\r\n        for (let j = 0; j < y; j++)\r\n            for (let i = 0; i < x; i++)\r\n                this.tiles[j][i] = new Tile_1.default(this, { x: j, y: i });\r\n        this.createLands();\r\n    }\r\n    ToLocal(x, y) {\r\n        return {\r\n            x: (x - this.translate.x) / this.scale.x,\r\n            y: (y - this.translate.y) / (this.scale.y / 2),\r\n        };\r\n    }\r\n    Update() {\r\n        if (this.interpolateTo) {\r\n            this.translate.x += (this.interpolateTo.x - this.interpolateTo.ox) * 0.04;\r\n            this.translate.y += (this.interpolateTo.y - this.interpolateTo.oy) * 0.04;\r\n            if (Math.hypot(this.translate.x - this.interpolateTo.x, this.translate.y - this.interpolateTo.y) < 1) {\r\n                this.translate.x = this.interpolateTo.x;\r\n                this.translate.y = this.interpolateTo.y;\r\n                delete this.interpolateTo;\r\n            }\r\n        }\r\n        this.Draw();\r\n    }\r\n    Draw() {\r\n        this.translate.x += this.translateSpeed.x * this.translateMult;\r\n        this.translate.y += this.translateSpeed.y * this.translateMult;\r\n        for (let i = 0; i < this.tiles.length; i++) {\r\n            for (let j = 0; j < this.tiles[i].length; j++) {\r\n                this.tiles[i][j].Draw();\r\n            }\r\n        }\r\n    }\r\n    onClick({ clientX, clientY }) {\r\n        if (this.isMouseDragging)\r\n            return;\r\n        const { x, y } = this.ToLocal(clientX, clientY);\r\n        const tile = this.tilesArray.find((t) => t.Dist({ x, y }) < Tile_1.default.sizet);\r\n        tile === null || tile === void 0 ? void 0 : tile.MouseClick();\r\n    }\r\n    onKeyDown(ev) {\r\n        const k = ev.key.toLowerCase();\r\n        const speed = 15;\r\n        if (k === \"d\")\r\n            this.translateSpeed.x = -speed;\r\n        else if (k === \"a\")\r\n            this.translateSpeed.x = speed;\r\n        else if (k === \"w\")\r\n            this.translateSpeed.y = speed;\r\n        else if (k === \"s\")\r\n            this.translateSpeed.y = -speed;\r\n        else if (k === \"shift\")\r\n            this.translateMult = 2;\r\n        else if (k === \"escape\") {\r\n            this.game.mainCiv.DeselectLastEntity();\r\n            this.game.ui.HideCity();\r\n        }\r\n    }\r\n    onKeyUp(ev) {\r\n        const k = ev.key.toLowerCase();\r\n        if (k === \"d\" && this.translateSpeed.x < 0)\r\n            this.translateSpeed.x = 0;\r\n        else if (k === \"a\" && this.translateSpeed.x > 0)\r\n            this.translateSpeed.x = 0;\r\n        else if (k === \"w\" && this.translateSpeed.y > 0)\r\n            this.translateSpeed.y = 0;\r\n        else if (k === \"s\" && this.translateSpeed.y < 0)\r\n            this.translateSpeed.y = 0;\r\n        else if (k === \"shift\")\r\n            this.translateMult = 1;\r\n    }\r\n    onKeyPress(ev) {\r\n        const k = ev.key.toLowerCase();\r\n        if (k === \" \")\r\n            this.game.NextTurn();\r\n    }\r\n    onMouseDown({ clientX, clientY }) {\r\n        this.isMouseDragging = false;\r\n        this.dragOrigin = {\r\n            x: clientX,\r\n            y: clientY,\r\n            tx: this.translate.x,\r\n            ty: this.translate.y,\r\n        };\r\n        this.isMouseDown = true;\r\n    }\r\n    onMouseUp({ clientX, clientY }) {\r\n        this.isMouseDown = false;\r\n        delete this.dragOrigin;\r\n        if (this.interpolateTo)\r\n            this.Focus(this.interpolateTo);\r\n    }\r\n    onMouseMove({ clientX, clientY }) {\r\n        if (this.isMouseDown === false)\r\n            return;\r\n        const distX = clientX - this.dragOrigin.x;\r\n        const distY = clientY - this.dragOrigin.y;\r\n        if (Math.abs(distX) + Math.abs(distY) < Tile_1.default.sizet)\r\n            return;\r\n        if (this.interpolateTo)\r\n            delete this.interpolateTo;\r\n        this.isMouseDragging = true;\r\n        this.translate.x = this.dragOrigin.tx + distX;\r\n        this.translate.y = this.dragOrigin.ty + distY;\r\n    }\r\n    onWheel({ deltaY }) {\r\n        if ((this.scale.x >= 0.8 && deltaY > 0) ||\r\n            (this.scale.x <= 0.4 && deltaY < 0))\r\n            return;\r\n        const [cx, cy] = [\r\n            (-this.translate.x + this.canvas.width / 2) / this.scale.x,\r\n            ((-this.translate.y + this.canvas.height / 2) / this.scale.y) * 2,\r\n        ];\r\n        deltaY /= 500;\r\n        this.scale.x += deltaY;\r\n        this.scale.y += deltaY;\r\n        this.Focus({ x: cx, y: cy }, false);\r\n    }\r\n    createLands() {\r\n        noise.seed(Math.random());\r\n        const scale = 40;\r\n        const gn = (i, j, s) => noise.perlin2(i / (scale / s), j / (scale / s));\r\n        const sx = this.size.x;\r\n        const sy = this.size.y;\r\n        for (let i = 0; i < this.size.y; i++) {\r\n            for (let j = 0; j < this.size.x; j++) {\r\n                let noise = gn(i, j, 1) + gn(i, j, 2) / 2 + gn(i, j, 4) / 4;\r\n                if (i <= 20)\r\n                    noise -= 1 - i / 20;\r\n                else if (i > sy - 20)\r\n                    noise -= 1 - (sy - i) / 20;\r\n                if (j <= 20)\r\n                    noise -= 1 - j / 20;\r\n                else if (j > sx - 20)\r\n                    noise -= 1 - (sx - j) / 20;\r\n                let val = noise;\r\n                const tile = this.tiles[i][j];\r\n                if (val < -0.2)\r\n                    tile.type = Tile_1.TileType.Woda;\r\n                else if (val < -0.17)\r\n                    tile.type = Tile_1.TileType.Piasek;\r\n                else if (val < 0.25)\r\n                    tile.type = Tile_1.TileType.Ziemia;\r\n                else if (val < 0.35)\r\n                    tile.type = Tile_1.TileType.Ciemnaziemia;\r\n                else if (val < 0.9)\r\n                    tile.type = Tile_1.TileType.Skała;\r\n                else\r\n                    tile.type = Tile_1.TileType.Śnieg;\r\n            }\r\n        }\r\n        const ta = this.tilesArray;\r\n        const stoneTiles = ta.filter((t) => t.type === Tile_1.TileType.Skała), greenTiles = ta.filter((t) => t.type === Tile_1.TileType.Ziemia), dgreenTiles = ta.filter((t) => t.type === Tile_1.TileType.Ciemnaziemia);\r\n        if (stoneTiles.length < 350) {\r\n            ta.forEach((t) => {\r\n                t.modifier = undefined;\r\n            });\r\n            this.createLands();\r\n            return;\r\n        }\r\n        this.GenerateResources(stoneTiles, TileModifier.stone);\r\n        this.GenerateResources(stoneTiles, TileModifier.iron);\r\n        this.GenerateResources(dgreenTiles, TileModifier.forest, 0.07);\r\n        this.GenerateResources(greenTiles, TileModifier.horse, 0.005);\r\n        this.GenerateResources(greenTiles, TileModifier.wheat, 0.01);\r\n        this.GenerateResources(greenTiles, TileModifier.iron, 0.005);\r\n        this.GenerateResources(greenTiles, TileModifier.stone, 0.005);\r\n        this.GenerateResources(greenTiles, TileModifier.forest, 0.004);\r\n        this.GenerateResources(greenTiles, TileModifier.iron, 0.001);\r\n        const groundTiles = this.tilesArray.filter((t) => t.type !== Tile_1.TileType.Woda && !t.modifier);\r\n        const mineralTile = this.RandomItem(groundTiles);\r\n        mineralTile.modifier = TileModifier.mineral;\r\n        mineralTile.displayModifier = false;\r\n    }\r\n    GenerateResources(arr, res, size = 0.07) {\r\n        for (let i = 0; i < Math.ceil(arr.length * size);) {\r\n            const tile = this.RandomItem(arr);\r\n            if (tile.modifier)\r\n                continue;\r\n            tile.modifier = res;\r\n            i++;\r\n        }\r\n    }\r\n    get tilesArray() {\r\n        const tiles = [];\r\n        for (let i = 0; i < this.size.y; i++)\r\n            for (let j = 0; j < this.size.x; j++)\r\n                tiles.push(this.tiles[i][j]);\r\n        return tiles;\r\n    }\r\n    RandomItem(arr) {\r\n        return arr[Math.floor(Math.random() * arr.length)];\r\n    }\r\n    Focus(pos, interpolate = true) {\r\n        const destination = {\r\n            x: -pos.x * this.scale.x + this.canvas.width / 2,\r\n            y: -pos.y * (this.scale.y / 2) + this.canvas.height / 2,\r\n        };\r\n        if (!interpolate) {\r\n            this.translate = { x: destination.x, y: destination.y };\r\n        }\r\n        else {\r\n            this.interpolateTo = {\r\n                x: destination.x,\r\n                y: destination.y,\r\n                ox: this.translate.x,\r\n                oy: this.translate.y,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.default = Map;\r\n\n\n//# sourceURL=webpack:///./src/Map.ts?");

/***/ }),

/***/ "./src/Tile.ts":
/*!*********************!*\
  !*** ./src/Tile.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TileType = void 0;\r\nconst Pathfind_1 = __webpack_require__(/*! ./Util/Pathfind */ \"./src/Util/Pathfind.ts\");\r\nconst JSONTileData = __webpack_require__(/*! ./json/tiledata.json */ \"./src/json/tiledata.json\");\r\nvar TileType;\r\n(function (TileType) {\r\n    TileType[TileType[\"Woda\"] = 0] = \"Woda\";\r\n    TileType[TileType[\"Ziemia\"] = 1] = \"Ziemia\";\r\n    TileType[TileType[\"Ska\\u0142a\"] = 2] = \"Ska\\u0142a\";\r\n    TileType[TileType[\"\\u015Anieg\"] = 3] = \"\\u015Anieg\";\r\n    TileType[TileType[\"Ciemnaziemia\"] = 4] = \"Ciemnaziemia\";\r\n    TileType[TileType[\"Piasek\"] = 5] = \"Piasek\";\r\n})(TileType = exports.TileType || (exports.TileType = {}));\r\nclass Tile {\r\n    constructor(map, mapPos, type = TileType.Woda) {\r\n        this.map = map;\r\n        this.mapPos = mapPos;\r\n        this.displayModifier = true;\r\n        let x = mapPos.x * Tile.size * 2 + mapPos.x;\r\n        let y = mapPos.y * Tile.sizet * 2 + mapPos.y * 2;\r\n        x -= (Tile.size / 2) * mapPos.x;\r\n        if (mapPos.x % 2 !== 0)\r\n            y += Tile.sizet * 1.05;\r\n        this.pos = { x: Math.floor(x), y: Math.floor(y) };\r\n        this.type = type;\r\n    }\r\n    Draw() {\r\n        const startX = -this.map.translate.x;\r\n        const startY = -this.map.translate.y;\r\n        const endX = startX + this.map.canvas.width;\r\n        const endY = startY + this.map.canvas.height;\r\n        const sizeX = Tile.size * this.map.scale.x;\r\n        const sizeY = Tile.size * this.map.scale.x;\r\n        if (startX - sizeX > this.pos.x * this.map.scale.x ||\r\n            startY - sizeY > (this.pos.y * this.map.scale.y) / 2 ||\r\n            endX + sizeX < this.pos.x * this.map.scale.x ||\r\n            endY + sizeY < (this.pos.y * this.map.scale.y) / 2) {\r\n            return;\r\n        }\r\n        this.map.c.beginPath();\r\n        const lines = [];\r\n        for (let i = 0; i < 7; i++) {\r\n            let x = this.pos.x + Math.cos((Math.PI * i) / 3) * Tile.size;\r\n            let y = this.pos.y + Math.sin((Math.PI * i) / 3) * Tile.size;\r\n            [x, y] = [Math.floor(x), Math.floor(y)];\r\n            this.map.c.lineTo(x, y);\r\n            if (!this.lines) {\r\n                if (i === 0 || i === 6)\r\n                    x -= 8;\r\n                else if (i === 1 || i === 2)\r\n                    y -= 8;\r\n                else if (i === 4 || i === 5)\r\n                    y += 8;\r\n                else if (i === 3)\r\n                    x += 8;\r\n                lines.push([x, y]);\r\n            }\r\n        }\r\n        if (!this.lines)\r\n            this.lines = lines;\r\n        this.map.c.fillStyle = this.color;\r\n        this.map.c.fill();\r\n        if (this.displayModifier && this._modifier !== undefined) {\r\n            this.map.c.drawImage(Tile.modifierImgs.get(this.modifier.img), this.pos.x - Tile.sizet, this.pos.y - Tile.sizet, Tile.sizet * 2, Tile.sizet * 2);\r\n        }\r\n        if (this.owner || this.selected)\r\n            this.DrawBorder();\r\n    }\r\n    DrawBorder() {\r\n        const adj = this.GetNamedAdj();\r\n        const check = (t) => {\r\n            if (!t)\r\n                return false;\r\n            if (this.selected &&\r\n                t.selected &&\r\n                t.selected.color !== this.selected.color)\r\n                return false;\r\n            if (this.selected && t.selected)\r\n                return true;\r\n            if (this.owner && t.owner && !t.selected)\r\n                if (this.owner.civ === t.owner.civ)\r\n                    return true;\r\n            return false;\r\n        };\r\n        this.map.c.beginPath();\r\n        this.lines.forEach((e, i) => {\r\n            if ((i === 1 && check(adj.br)) ||\r\n                (i === 2 && check(adj.b)) ||\r\n                (i === 3 && check(adj.bl)) ||\r\n                (i === 4 && check(adj.tl)) ||\r\n                (i === 5 && check(adj.t)) ||\r\n                (i === 6 && check(adj.tr))) {\r\n                this.map.c.beginPath();\r\n                return;\r\n            }\r\n            this.map.c.lineWidth = 8;\r\n            if (i === 0)\r\n                return;\r\n            this.map.c.moveTo(this.lines[i - 1][0], this.lines[i - 1][1]);\r\n            this.map.c.lineTo(e[0], e[1]);\r\n            if (this.selected)\r\n                this.map.c.strokeStyle = this.selected.color;\r\n            else\r\n                this.map.c.strokeStyle = this.owner.civ.color;\r\n            this.map.c.stroke();\r\n            this.map.c.beginPath();\r\n        });\r\n    }\r\n    GetAdj(range = 1) {\r\n        const res = [];\r\n        for (let y = -range; y <= range; y++)\r\n            for (let x = -range; x <= range; x++) {\r\n                if (x === 0 && y === 0)\r\n                    continue;\r\n                const mx = this.mapPos.x + x;\r\n                const my = this.mapPos.y + y;\r\n                if (this.map.tiles[mx] && this.map.tiles[mx][my])\r\n                    res.push(this.map.tiles[mx][my]);\r\n            }\r\n        return res.filter((t) => this.Dist(t) <= Tile.size * 2 * range);\r\n    }\r\n    GetNamedAdj() {\r\n        const res = {};\r\n        const adj = this.GetAdj();\r\n        adj.forEach((e) => {\r\n            if (e.pos.x > this.pos.x && this.pos.y > e.pos.y)\r\n                res.tr = e;\r\n            else if (e.pos.x > this.pos.x && this.pos.y < e.pos.y)\r\n                res.br = e;\r\n            else if (e.pos.x < this.pos.x && this.pos.y > e.pos.y)\r\n                res.tl = e;\r\n            else if (e.pos.x < this.pos.x && this.pos.y < e.pos.y)\r\n                res.bl = e;\r\n            else if (this.pos.y > e.pos.y)\r\n                res.t = e;\r\n            else if (this.pos.y < e.pos.y)\r\n                res.b = e;\r\n        });\r\n        return res;\r\n    }\r\n    Dist(target) {\r\n        let pos;\r\n        if (target instanceof Tile) {\r\n            pos = target.pos;\r\n        }\r\n        else\r\n            pos = target;\r\n        return Math.hypot(this.pos.x - pos.x, this.pos.y - pos.y);\r\n    }\r\n    FindPath(tile) {\r\n        return Pathfind_1.Astar.findPath(this, tile);\r\n    }\r\n    MouseClick() {\r\n        var _a, _b;\r\n        if ((_a = this.selected) === null || _a === void 0 ? void 0 : _a.entity)\r\n            this.selected.entity.AcceptTile(this);\r\n        else if (((_b = this.entity) === null || _b === void 0 ? void 0 : _b.selected) === false)\r\n            this.entity.Select();\r\n        else if (this.city)\r\n            this.city.Select();\r\n    }\r\n    Select(data) {\r\n        this.selected = data;\r\n    }\r\n    Deselect() {\r\n        delete this.selected;\r\n    }\r\n    set type(t) {\r\n        this._type = t;\r\n        let data;\r\n        switch (t) {\r\n            case TileType.Woda:\r\n                data = JSONTileData.Woda;\r\n                break;\r\n            case TileType.Ziemia:\r\n                data = JSONTileData.Ziemia;\r\n                break;\r\n            case TileType.Ciemnaziemia:\r\n                data = JSONTileData.Ciemnaziemia;\r\n                break;\r\n            case TileType.Piasek:\r\n                data = JSONTileData.Piasek;\r\n                break;\r\n            case TileType.Skała:\r\n                data = JSONTileData.Skała;\r\n                break;\r\n            case TileType.Śnieg:\r\n                data = JSONTileData.Śnieg;\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid tile type\");\r\n        }\r\n        this.data = data;\r\n    }\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    get weight() {\r\n        var _a;\r\n        return this.data.weight + (((_a = this.modifier) === null || _a === void 0 ? void 0 : _a.weight) || 0);\r\n    }\r\n    get modifier() {\r\n        return this._modifier;\r\n    }\r\n    get color() {\r\n        return this.data.color;\r\n    }\r\n    set modifier(value) {\r\n        if (value === undefined) {\r\n            delete this._modifier;\r\n            this._modifier = undefined;\r\n            return;\r\n        }\r\n        if (Tile.modifierImgs.has(value.img)) {\r\n            this._modifier = value;\r\n        }\r\n        else {\r\n            const img = new Image();\r\n            img.src = `./img/modifiers/${value.img}.png`;\r\n            img.onload = () => {\r\n                Tile.modifierImgs.set(value.img, img);\r\n                this._modifier = value;\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.default = Tile;\r\nTile.modifierImgs = new globalThis.Map();\r\nTile.size = 75;\r\nTile.sizet = Math.floor(Math.sqrt(Math.pow(Tile.size, 2) - Math.pow((Tile.size / 2), 2)));\r\n\n\n//# sourceURL=webpack:///./src/Tile.ts?");

/***/ }),

/***/ "./src/UI/CityScreen.ts":
/*!******************************!*\
  !*** ./src/UI/CityScreen.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst UI_1 = __webpack_require__(/*! ./UI */ \"./src/UI/UI.ts\");\r\nconst Units_1 = __webpack_require__(/*! ../Builders/Units */ \"./src/Builders/Units.ts\");\r\nconst Buildings_1 = __webpack_require__(/*! ../Builders/Buildings */ \"./src/Builders/Buildings.ts\");\r\nclass CityScreen {\r\n    constructor() {\r\n        this.uielements = {\r\n            container: UI_1.getElement(\".city\"),\r\n            cityName: UI_1.getElement(\"#city-name\"),\r\n            cityStats: {\r\n                food: UI_1.getElement(\"#city-food\"),\r\n                pop: UI_1.getElement(\"#city-pop\"),\r\n                prod: UI_1.getElement(\"#city-prod\"),\r\n                grow: UI_1.getElement(\"#city-grow\"),\r\n                ttb: UI_1.getElement(\"#city-build\"),\r\n            },\r\n            citizens: {\r\n                citizenCount: UI_1.getElement(\"#citizen-count\"),\r\n                prod: {\r\n                    count: UI_1.getElement(\"#meter-count-prod\"),\r\n                    inc: UI_1.getElement(\"#meter-prod-inc\"),\r\n                    dec: UI_1.getElement(\"#meter-prod-dec\"),\r\n                },\r\n                food: {\r\n                    count: UI_1.getElement(\"#meter-count-pop\"),\r\n                    inc: UI_1.getElement(\"#meter-pop-inc\"),\r\n                    dec: UI_1.getElement(\"#meter-pop-dec\"),\r\n                },\r\n                money: {\r\n                    count: UI_1.getElement(\"#meter-count-money\"),\r\n                    inc: UI_1.getElement(\"#meter-money-inc\"),\r\n                    dec: UI_1.getElement(\"#meter-money-dec\"),\r\n                },\r\n                horse: {\r\n                    count: UI_1.getElement(\"#meter-count-horse\"),\r\n                    inc: UI_1.getElement(\"#meter-horse-inc\"),\r\n                    dec: UI_1.getElement(\"#meter-horse-dec\"),\r\n                },\r\n                wood: {\r\n                    count: UI_1.getElement(\"#meter-count-wood\"),\r\n                    inc: UI_1.getElement(\"#meter-wood-inc\"),\r\n                    dec: UI_1.getElement(\"#meter-wood-dec\"),\r\n                },\r\n                iron: {\r\n                    count: UI_1.getElement(\"#meter-count-iron\"),\r\n                    inc: UI_1.getElement(\"#meter-iron-inc\"),\r\n                    dec: UI_1.getElement(\"#meter-iron-dec\"),\r\n                },\r\n                stone: {\r\n                    count: UI_1.getElement(\"#meter-count-stone\"),\r\n                    inc: UI_1.getElement(\"#meter-stone-inc\"),\r\n                    dec: UI_1.getElement(\"#meter-stone-dec\"),\r\n                },\r\n            },\r\n            availableBuildings: UI_1.getElement(\".city-buildings\"),\r\n            availableUnits: UI_1.getElement(\".city-units\"),\r\n            itemDescription: UI_1.getElement(\".available-item-desc\"),\r\n            buildButton: UI_1.getElement(\".available-btn\"),\r\n        };\r\n        UI_1.getElement(\".city-close\").onclick = () => this.Close();\r\n    }\r\n    Show(city) {\r\n        var _a;\r\n        const stats = city.stats;\r\n        const available = city.available;\r\n        const ui = this.uielements;\r\n        ui.cityName.textContent = city.name;\r\n        ui.cityStats.food.textContent = stats.food.toString();\r\n        ui.cityStats.pop.textContent = stats.pop.toString();\r\n        ui.cityStats.prod.textContent = stats.prod.toString();\r\n        ui.cityStats.grow.textContent = city.timeLeftToGrow.toString();\r\n        ui.cityStats.ttb.textContent =\r\n            ((_a = city.production) === null || _a === void 0 ? void 0 : _a.timeLeftToBuild.toString()) || \"N/A\";\r\n        this.uielements.availableUnits.innerHTML = \"\";\r\n        this.uielements.availableBuildings.innerHTML = \"\";\r\n        for (const item of available) {\r\n            if (!item)\r\n                continue;\r\n            const container = \"health\" in item ? ui.availableUnits : ui.availableBuildings;\r\n            container.appendChild(this.createListItem(item, city));\r\n        }\r\n        this.addCallbacksToCitizenManagment(city);\r\n        this.updateCitizensOccupied(city);\r\n        ui.container.classList.add(\"show\");\r\n    }\r\n    Close() {\r\n        this.uielements.container.classList.remove(\"show\");\r\n        UI_1.getElement(\".city-close\").blur();\r\n    }\r\n    updateCitizensOccupied(city) {\r\n        this.uielements.citizens.citizenCount.textContent = (city.stats.pop - city.assignedCitizenCount).toString();\r\n        Object.entries(city.assignedCitizens).forEach(([k, v]) => {\r\n            this.uielements.citizens[k].count.textContent = v;\r\n        });\r\n    }\r\n    addCallbacksToCitizenManagment(city) {\r\n        for (const key in this.uielements.citizens) {\r\n            if (!(\"dec\" in this.uielements.citizens[key]))\r\n                continue;\r\n            this.uielements.citizens[key].inc.onclick = () => {\r\n                city.SetCitizen(\"inc\", key);\r\n            };\r\n            this.uielements.citizens[key].dec.onclick = () => {\r\n                city.SetCitizen(\"dec\", key);\r\n            };\r\n        }\r\n    }\r\n    createListItem(item, city) {\r\n        const li = document.createElement(\"li\"), btn = document.createElement(\"button\"), imgE = document.createElement(\"img\"), span = document.createElement(\"span\");\r\n        li.className = \"available-list-item\";\r\n        btn.className = \"available-list-btn\";\r\n        imgE.className = \"list-btn-img\";\r\n        imgE.src = \"./img/zamek.png\";\r\n        span.textContent = item.name;\r\n        btn.onclick = () => {\r\n            this.uielements.itemDescription.textContent =\r\n                item.name + \": \" + item.desc;\r\n            this.uielements.itemDescription.innerHTML +=\r\n                \"<br>Produkcja: \" + item.production;\r\n            for (const key in item.cost) {\r\n                const span = document.createElement(\"span\");\r\n                span.style.marginLeft = \"5px\";\r\n                span.style.color =\r\n                    city.civ.resources[key] >= item.cost[key] ? \"green\" : \"red\";\r\n                span.innerHTML += this.costToName(key) + \": \" + item.cost[key];\r\n                this.uielements.itemDescription.appendChild(span);\r\n            }\r\n            this.uielements.buildButton.classList.add(\"show\");\r\n            this.uielements.buildButton.onclick = () => {\r\n                this.uielements.buildButton.classList.remove(\"show\");\r\n                const builder = \"health\" in item\r\n                    ? Units_1.GetUnitBuilder(item, city.civ, city.tile)\r\n                    : Buildings_1.GetBuildingBuilder(item, city);\r\n                city.Build(builder);\r\n            };\r\n        };\r\n        li.appendChild(btn);\r\n        btn.appendChild(imgE);\r\n        btn.appendChild(span);\r\n        return li;\r\n    }\r\n    costToName(key) {\r\n        switch (key) {\r\n            case \"money\":\r\n                return \"Złoto\";\r\n            case \"horse\":\r\n                return \"Konie\";\r\n            case \"wood\":\r\n                return \"Drewno\";\r\n            case \"stone\":\r\n                return \"Kamień\";\r\n            case \"iron\":\r\n                return \"Żelazo\";\r\n            default:\r\n                return key;\r\n        }\r\n    }\r\n}\r\nexports.default = CityScreen;\r\n\n\n//# sourceURL=webpack:///./src/UI/CityScreen.ts?");

/***/ }),

/***/ "./src/UI/UI.ts":
/*!**********************!*\
  !*** ./src/UI/UI.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getElement = exports.UI = void 0;\r\nconst CityScreen_1 = __webpack_require__(/*! ./CityScreen */ \"./src/UI/CityScreen.ts\");\r\nconst UnitScreen_1 = __webpack_require__(/*! ./UnitScreen */ \"./src/UI/UnitScreen.ts\");\r\nclass UI {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this._turn = 1;\r\n        this.cityScreen = new CityScreen_1.default();\r\n        this.unitScreen = new UnitScreen_1.default();\r\n        this.uiitems = {\r\n            actionLog: getElement(\"#action-log\"),\r\n            resources: {\r\n                money: {\r\n                    container: getElement(\"#res-gold\"),\r\n                    income: getElement(\"#res-gold-p\"),\r\n                },\r\n                wood: {\r\n                    container: getElement(\"#res-wood\"),\r\n                    income: getElement(\"#res-wood-p\"),\r\n                },\r\n                stone: {\r\n                    container: getElement(\"#res-stone\"),\r\n                    income: getElement(\"#res-stone-p\"),\r\n                },\r\n                iron: {\r\n                    container: getElement(\"#res-iron\"),\r\n                    income: getElement(\"#res-iron-p\"),\r\n                },\r\n                horse: {\r\n                    container: getElement(\"#res-horse\"),\r\n                    income: getElement(\"#res-horse-p\"),\r\n                },\r\n                mineral: {\r\n                    container: getElement(\"#res-mineral\"),\r\n                    income: getElement(\"#res-mineral-p\"),\r\n                },\r\n            },\r\n            turn: getElement(\"#res-turn\"),\r\n        };\r\n        getElement(\".actions-turn\").onclick = () => {\r\n            game.NextTurn();\r\n        };\r\n    }\r\n    ShowUnit(unit) {\r\n        this.unitScreen.Show(unit);\r\n    }\r\n    HideUnit() {\r\n        this.unitScreen.Close();\r\n    }\r\n    ShowCity(city) {\r\n        this.cityScreen.Show(city);\r\n        this.UpdateResources(city.civ);\r\n    }\r\n    HideCity() {\r\n        this.cityScreen.Close();\r\n    }\r\n    UpdateResources(civ) {\r\n        const income = civ.GetResourceIncome();\r\n        const res = civ.resources;\r\n        for (const k in income) {\r\n            if (!this.uiitems.resources[k])\r\n                continue;\r\n            this.uiitems.resources[k].container.textContent = res[k];\r\n            const inc = Math.round(income[k]);\r\n            this.uiitems.resources[k].income.textContent =\r\n                \"(\" + (inc >= 0 ? \"+\" : \"\") + inc + \")\";\r\n        }\r\n    }\r\n    NextTurn() {\r\n        this.uiitems.turn.textContent = (++this._turn).toString();\r\n        this.UpdateResources(this.game.mainCiv);\r\n    }\r\n    HideEntity() {\r\n        this.selectedEntity && this.selectedEntity.Deselect();\r\n    }\r\n    appendToActionLog(text) {\r\n        const al = this.uiitems.actionLog;\r\n        const li = document.createElement(\"li\");\r\n        li.textContent = text;\r\n        al.insertBefore(li, al.firstChild);\r\n    }\r\n}\r\nexports.UI = UI;\r\nfunction getElement(selector) {\r\n    const ele = document.querySelector(selector);\r\n    if (!ele)\r\n        throw new Error(\"Could not find element with: \" + selector);\r\n    else\r\n        return ele;\r\n}\r\nexports.getElement = getElement;\r\n\n\n//# sourceURL=webpack:///./src/UI/UI.ts?");

/***/ }),

/***/ "./src/UI/UnitScreen.ts":
/*!******************************!*\
  !*** ./src/UI/UnitScreen.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst UI_1 = __webpack_require__(/*! ./UI */ \"./src/UI/UI.ts\");\r\nclass UnitScreen {\r\n    constructor() {\r\n        this.uielements = {\r\n            container: UI_1.getElement(\".actions-container\"),\r\n            unitInfo: UI_1.getElement(\"#unit-info\"),\r\n        };\r\n    }\r\n    Show(unit) {\r\n        this.uielements.container.innerHTML = \"\";\r\n        this.uielements.unitInfo.innerHTML = \"\";\r\n        unit.walkingRange > 0 &&\r\n            unit.actions.forEach((e) => this.uielements.container.appendChild(this.getActionButton(e)));\r\n        this.addToUnitInfo(unit);\r\n    }\r\n    Close() {\r\n        this.uielements.container.innerHTML = \"\";\r\n        this.uielements.unitInfo.innerHTML = \"\";\r\n    }\r\n    getActionButton(action) {\r\n        const btn = document.createElement(\"button\");\r\n        const img = document.createElement(\"img\");\r\n        const span = document.createElement(\"span\");\r\n        btn.className = \"action-btn\";\r\n        img.className = \"action-img\";\r\n        span.textContent = action.desc;\r\n        btn.onclick = () => action.execute();\r\n        img.src = action.img;\r\n        btn.appendChild(img);\r\n        btn.appendChild(span);\r\n        return btn;\r\n    }\r\n    addToUnitInfo(unit) {\r\n        const { health, fullHealth, defense, attack, data: { desc, name }, } = unit;\r\n        const l1 = document.createElement(\"li\"), l2 = document.createElement(\"li\"), l3 = document.createElement(\"li\"), l4 = document.createElement(\"li\");\r\n        l1.textContent = `Życie: ${health}/${fullHealth}`;\r\n        l2.textContent = `Obrona: ${defense}`;\r\n        l3.textContent = `Obrażenia: ${attack}`;\r\n        l4.textContent = `${name}: ${desc}`;\r\n        this.uielements.unitInfo.appendChild(l1);\r\n        this.uielements.unitInfo.appendChild(l2);\r\n        this.uielements.unitInfo.appendChild(l3);\r\n        this.uielements.unitInfo.appendChild(l4);\r\n    }\r\n    addInfoToPanel(text) {\r\n        const li = document.createElement(\"li\");\r\n        li.textContent = text;\r\n        this.uielements.unitInfo.appendChild(li);\r\n    }\r\n}\r\nexports.default = UnitScreen;\r\n\n\n//# sourceURL=webpack:///./src/UI/UnitScreen.ts?");

/***/ }),

/***/ "./src/Util/Pathfind.ts":
/*!******************************!*\
  !*** ./src/Util/Pathfind.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Astar = void 0;\r\nclass MinHeap {\r\n    constructor() {\r\n        this.arr = [];\r\n    }\r\n    parent(i) {\r\n        return Math.floor((i - 1) / 2);\r\n    }\r\n    leftChild(i) {\r\n        return i * 2 + 1;\r\n    }\r\n    rightChild(i) {\r\n        return i * 2 + 2;\r\n    }\r\n    swap(a, b) {\r\n        const temp = this.arr[a];\r\n        this.arr[a] = this.arr[b];\r\n        this.arr[b] = temp;\r\n    }\r\n    insert(value) {\r\n        let index = this.arr.length;\r\n        let parent = this.parent(index);\r\n        this.arr[index] = value;\r\n        if (!index)\r\n            return;\r\n        while (parent > -1 && this.arr[parent][0] > this.arr[index][0]) {\r\n            this.swap(parent, index);\r\n            index = parent;\r\n            parent = this.parent(index);\r\n        }\r\n    }\r\n    remove() {\r\n        if (this.arr.length === 0)\r\n            return;\r\n        const arr = this.arr;\r\n        const root = arr[0];\r\n        arr[0] = arr.pop();\r\n        let index = 0, leftIndex = this.leftChild(index), rightIndex = this.rightChild(index);\r\n        while ((arr[leftIndex] && arr[leftIndex][0] < arr[index][0]) ||\r\n            (arr[rightIndex] && arr[rightIndex][0] < arr[index][0])) {\r\n            if (arr[leftIndex][0] < arr[index][0]) {\r\n                this.swap(leftIndex, index);\r\n                index = leftIndex;\r\n            }\r\n            else {\r\n                this.swap(rightIndex, index);\r\n                index = rightIndex;\r\n            }\r\n            leftIndex = this.leftChild(index);\r\n            rightIndex = this.rightChild(index);\r\n        }\r\n        return root;\r\n    }\r\n    get size() {\r\n        return this.arr.length;\r\n    }\r\n}\r\nclass Astar {\r\n    static h(tile, goal) {\r\n        return tile.Dist(goal);\r\n    }\r\n    static f(g, h) {\r\n        return g + h;\r\n    }\r\n    static findPath(start, goal) {\r\n        const heap = new MinHeap();\r\n        const gs = new Map();\r\n        const history = new Map();\r\n        heap.insert([Astar.h(start, goal), start]);\r\n        gs.set(start, 0);\r\n        while (heap.size > 0) {\r\n            const curr = heap.remove();\r\n            const cf = curr[0], ct = curr[1];\r\n            if (ct === goal)\r\n                break;\r\n            for (const neighbor of ct.GetAdj()) {\r\n                const ng = gs.get(ct) + 1;\r\n                if (!gs.has(neighbor) || ng < gs.get(neighbor)) {\r\n                    gs.set(neighbor, ng);\r\n                    const fcost = this.f(ng, Astar.h(neighbor, goal));\r\n                    heap.insert([fcost, neighbor]);\r\n                    history.set(neighbor, ct);\r\n                }\r\n            }\r\n        }\r\n        const path = [goal];\r\n        let tile = goal;\r\n        while (tile) {\r\n            const lastItem = path.length - 1;\r\n            tile = path[lastItem];\r\n            if (tile === start)\r\n                break;\r\n            path.push(history.get(tile) || start);\r\n        }\r\n        return path;\r\n    }\r\n}\r\nexports.Astar = Astar;\r\n\n\n//# sourceURL=webpack:///./src/Util/Pathfind.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Game = void 0;\r\nconst Map_1 = __webpack_require__(/*! ./Map */ \"./src/Map.ts\");\r\nconst UI_1 = __webpack_require__(/*! ./UI/UI */ \"./src/UI/UI.ts\");\r\nconst Civilization_1 = __webpack_require__(/*! ./Civiliziations/Civilization */ \"./src/Civiliziations/Civilization.ts\");\r\nconst Tile_1 = __webpack_require__(/*! ./Tile */ \"./src/Tile.ts\");\r\nconst Units_1 = __webpack_require__(/*! ./Builders/Units */ \"./src/Builders/Units.ts\");\r\nconst Units = __webpack_require__(/*! ./json/units.json */ \"./src/json/units.json\");\r\nclass Game {\r\n    constructor(size) {\r\n        this.size = size;\r\n        this.assets = {};\r\n        this.civilizations = [];\r\n        this.canvas = document.querySelector(\"canvas\");\r\n        this.c = this.canvas.getContext(\"2d\", { alpha: false });\r\n        this.ui = new UI_1.UI(this);\r\n        window.onresize = () => {\r\n            this.canvas.width = document.body.clientWidth;\r\n            this.canvas.height = document.body.clientHeight - 200;\r\n        };\r\n        window.onresize();\r\n    }\r\n    Start() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            this.map = new Map_1.default(this, this.size.x, this.size.y);\r\n            this.mainCiv = new Civilization_1.Civilization(this, \"fornal\", \"red\", true);\r\n            this.AddCiv(new Civilization_1.Civilization(this, \"asd\", \"purple\"));\r\n            const rtile = this.map.RandomItem(this.map.tilesArray.filter((t) => t.type === Tile_1.TileType.Ziemia));\r\n            this.mainCiv.AddEntity(Units_1.GetUnitBuilder(Units.find((t) => t.name === \"Łucznik\"), this.mainCiv, this.map.RandomItem(rtile.GetAdj())).Build());\r\n            this.mainCiv.AddEntity(Units_1.GetUnitBuilder(Units.find((t) => t.name === \"Łucznik\"), this.civilizations[0], this.map.RandomItem(rtile.GetAdj())).Build());\r\n            this.Update();\r\n        });\r\n    }\r\n    Update() {\r\n        this.c.fillStyle = \"black\";\r\n        this.c.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.c.save();\r\n        this.c.translate(this.map.translate.x, this.map.translate.y);\r\n        this.c.scale(this.map.scale.x, this.map.scale.y / 2);\r\n        this.map.Update();\r\n        this.mainCiv.Update();\r\n        this.civilizations.forEach((c) => c.Update());\r\n        this.c.restore();\r\n        requestAnimationFrame(() => this.Update());\r\n    }\r\n    NextTurn() {\r\n        if (this.civilizations.every((t) => t.ready) && this.mainCiv.ready) {\r\n            this.mainCiv.NextTurn();\r\n            this.civilizations.forEach((t) => t.NextTurn());\r\n            this.ui.NextTurn();\r\n        }\r\n        else {\r\n            this.mainCiv.NextAction();\r\n        }\r\n    }\r\n    AddCiv(civ) {\r\n        this.civilizations.push(civ);\r\n    }\r\n    LoadAssets(srcs) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield Promise.all(Object.keys(srcs).map((e) => {\r\n                return new Promise((res, rej) => {\r\n                    const img = new Image();\r\n                    img.src = \"./img/\" + srcs[e] + \".png\";\r\n                    img.onload = () => {\r\n                        this.assets[e] = img;\r\n                        res();\r\n                    };\r\n                });\r\n            }));\r\n        });\r\n    }\r\n}\r\nexports.Game = Game;\r\nconst game = new Game({ x: 100, y: 100 });\r\ngame\r\n    .LoadAssets({\r\n    Miasto: \"city\",\r\n    Osadnik: \"settler\",\r\n    Robotnik: \"units/worker\",\r\n    Lucznik: \"units/archer\",\r\n    Kusznik: \"units/crossbowman\",\r\n    Wojownik: \"units/warrior\",\r\n    Taran: \"units/taran\",\r\n    Docent: \"units/docent\",\r\n    Katapulta: \"units/catapult\",\r\n    Armata: \"units/cannon\",\r\n    Konny: \"units/cavalry\",\r\n    Rycerz: \"units/knight\",\r\n    Rydwan: \"units/chariot\",\r\n})\r\n    .then(() => {\r\n    game.Start();\r\n    __webpack_require__(/*! ./json/citybuilding.json */ \"./src/json/citybuilding.json\").forEach((e) => {\r\n    });\r\n});\r\nconsole.clear();\r\nconsole.warn(\"ADD IMAGE FOR TARAN!!\");\r\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ }),

/***/ "./src/json/citybuilding.json":
/*!************************************!*\
  !*** ./src/json/citybuilding.json ***!
  \************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"[{\\\"name\\\":\\\"Farma\\\",\\\"desc\\\":\\\"+3 do żywności\\\",\\\"production\\\":5,\\\"requires\\\":[],\\\"cost\\\":{}},{\\\"name\\\":\\\"Drwal\\\",\\\"desc\\\":\\\"Pozwala na budowanie na lasach należących do tego miasta tartaku\\\",\\\"production\\\":5,\\\"requires\\\":[\\\"Farma\\\"],\\\"cost\\\":{}},{\\\"name\\\":\\\"Stolarz\\\",\\\"desc\\\":\\\"Pozwala zbudować chate myśliwego. -1 drewna\\\",\\\"production\\\":6,\\\"requires\\\":[\\\"Drwal\\\"],\\\"cost\\\":{}},{\\\"name\\\":\\\"Myśliwy\\\",\\\"desc\\\":\\\"+2 do żywności oraz pozwala na tworzenie łuczników\\\",\\\"production\\\":10,\\\"requires\\\":[\\\"Stolarz\\\"],\\\"cost\\\":{}},{\\\"name\\\":\\\"Młyn\\\",\\\"desc\\\":\\\"+2 do produkcji i +2 do żywnosci\\\",\\\"production\\\":15,\\\"requires\\\":[\\\"Myśliwy\\\",\\\"Kowal\\\"],\\\"cost\\\":{\\\"stone\\\":15,\\\"wood\\\":30}},{\\\"name\\\":\\\"Kamieniołom\\\",\\\"desc\\\":\\\"Pozwala na budowę kamieniołomu na złożach należących wyłącznie do tego miasta.\\\",\\\"production\\\":5,\\\"requires\\\":[],\\\"cost\\\":{}},{\\\"name\\\":\\\"Wojownik\\\",\\\"desc\\\":\\\"Szkolenie wojowników\\\",\\\"production\\\":7,\\\"requires\\\":[\\\"Kamieniołom\\\"],\\\"cost\\\":{\\\"stone\\\":5}},{\\\"name\\\":\\\"Huta\\\",\\\"desc\\\":\\\"Pozwala budować na złożach należących do tego miasta kopalnie żelaza.\\\",\\\"production\\\":9,\\\"requires\\\":[\\\"Wojownik\\\"],\\\"cost\\\":{\\\"stone\\\":20,\\\"wood\\\":30}},{\\\"name\\\":\\\"Kowal\\\",\\\"desc\\\":\\\"+3 do produkcji -1 żelaza.\\\",\\\"production\\\":11,\\\"requires\\\":[\\\"Huta\\\"],\\\"cost\\\":{\\\"stone\\\":15,\\\"wood\\\":30,\\\"iron\\\":5}},{\\\"name\\\":\\\"Zakład rzemieślniczy\\\",\\\"desc\\\":\\\"+3 do produkcji i pozwala na tworzenie tarana oraz budowy stoczni(tylko dla miast przy wodzie). -1 drewna, -1 kamienia, -1 żelaza\\\",\\\"production\\\":16,\\\"requires\\\":[\\\"Myśliwy\\\",\\\"Kowal\\\"],\\\"cost\\\":{\\\"stone\\\":30,\\\"wood\\\":30,\\\"iron\\\":15}},{\\\"name\\\":\\\"Stajnia\\\",\\\"desc\\\":\\\"+3 do produkcji żywności i pozwala na szkolenie Konnych. -1 koni\\\",\\\"production\\\":16,\\\"requires\\\":[\\\"Młyn\\\"],\\\"cost\\\":{\\\"stone\\\":10,\\\"wood\\\":50}},{\\\"name\\\":\\\"Folwark\\\",\\\"desc\\\":\\\"+3 do produkcji żywności \\\",\\\"production\\\":19,\\\"requires\\\":[\\\"Stajnia\\\"],\\\"cost\\\":{\\\"stone\\\":35,\\\"wood\\\":40}},{\\\"name\\\":\\\"Dzielnica mieszkaniowia\\\",\\\"desc\\\":\\\"-3 do produkcji żywności\\\",\\\"production\\\":20,\\\"requires\\\":[\\\"Folwark\\\"],\\\"cost\\\":{\\\"stone\\\":40,\\\"wood\\\":30}},{\\\"name\\\":\\\"Sklep\\\",\\\"desc\\\":\\\"+1 do produkcji żywności\\\",\\\"production\\\":25,\\\"requires\\\":[\\\"Młyn\\\"],\\\"cost\\\":{\\\"stone\\\":20,\\\"wood\\\":30}},{\\\"name\\\":\\\"Dzielnica handlowa\\\",\\\"desc\\\":\\\"+5 do złota. -1 drewna, -2 kamienia, -1 żelaza\\\",\\\"production\\\":25,\\\"requires\\\":[\\\"Sklep\\\"],\\\"cost\\\":{\\\"stone\\\":30,\\\"wood\\\":30}},{\\\"name\\\":\\\"Targowisko\\\",\\\"desc\\\":\\\"+6 do produkcji żywności, +5 do złota\\\",\\\"production\\\":28,\\\"requires\\\":[\\\"Dzielnica handlowa\\\"],\\\"cost\\\":{\\\"stone\\\":40,\\\"wood\\\":40}},{\\\"name\\\":\\\"Bank\\\",\\\"desc\\\":\\\"+2 do złota\\\",\\\"production\\\":25,\\\"requires\\\":[\\\"Targowisko\\\"],\\\"cost\\\":{\\\"stone\\\":70}},{\\\"name\\\":\\\"Szkoła\\\",\\\"desc\\\":\\\"+2 do produkcji\\\",\\\"production\\\":22,\\\"requires\\\":[\\\"Zakład rzemieślniczy\\\"],\\\"cost\\\":{\\\"stone\\\":30,\\\"wood\\\":30}},{\\\"name\\\":\\\"Dzielnica naukowa\\\",\\\"desc\\\":\\\"+4 do produkcji\\\",\\\"production\\\":27,\\\"requires\\\":[\\\"Szkoła\\\"],\\\"cost\\\":{\\\"stone\\\":40,\\\"wood\\\":30}},{\\\"name\\\":\\\"Biblioteka\\\",\\\"desc\\\":\\\"+3 do produkcji\\\",\\\"production\\\":21,\\\"requires\\\":[\\\"Dzielnica naukowa\\\"],\\\"cost\\\":{\\\"stone\\\":40,\\\"wood\\\":40}},{\\\"name\\\":\\\"Uniwersytet\\\",\\\"desc\\\":\\\"+5 do produkcji i pozwala wyszkolić docenta Fiutta.\\\",\\\"production\\\":30,\\\"requires\\\":[\\\"Biblioteka\\\"],\\\"cost\\\":{\\\"stone\\\":75}},{\\\"name\\\":\\\"Dzielnica przemysłowa\\\",\\\"desc\\\":\\\"+5 do produkcji, -1 drewna, -1 kamienia\\\",\\\"production\\\":40,\\\"requires\\\":[\\\"Zakład rzemieślniczy\\\"],\\\"cost\\\":{\\\"stone\\\":30,\\\"wood\\\":30,\\\"iron\\\":20}},{\\\"name\\\":\\\"Manufaktura\\\",\\\"desc\\\":\\\"+3 do produkcji, -1 żelaza\\\",\\\"production\\\":57,\\\"requires\\\":[\\\"Dzielnica przemysłowa\\\"],\\\"cost\\\":{\\\"stone\\\":30,\\\"wood\\\":30,\\\"iron\\\":20}},{\\\"name\\\":\\\"Fabryka\\\",\\\"desc\\\":\\\"+4 do produkcji, -1 drewna, -1 kamienia, -1 żelaza\\\",\\\"production\\\":90,\\\"requires\\\":[\\\"Manufaktura\\\"],\\\"cost\\\":{\\\"stone\\\":40,\\\"wood\\\":40,\\\"iron\\\":40}},{\\\"name\\\":\\\"Murarz\\\",\\\"desc\\\":\\\"pozwala zbudować Mur\\\",\\\"production\\\":100,\\\"requires\\\":[\\\"Zakład rzemieślniczy\\\"],\\\"cost\\\":{\\\"stone\\\":30}},{\\\"name\\\":\\\"Mur 1\\\",\\\"desc\\\":\\\"Zwiększa obronność miasta o 50. Zwykłe katapulty już nie wystarczą\\\",\\\"production\\\":200,\\\"requires\\\":[\\\"Murarz\\\"],\\\"cost\\\":{\\\"stone\\\":40}},{\\\"name\\\":\\\"Dzielnica wojskowa\\\",\\\"desc\\\":\\\"+5 do produkcji\\\",\\\"production\\\":120,\\\"requires\\\":[\\\"Murarz\\\"],\\\"cost\\\":{\\\"stone\\\":40,\\\"wood\\\":20,\\\"iron\\\":20}},{\\\"name\\\":\\\"Warsztat katapult\\\",\\\"desc\\\":\\\"+5 do produkcji i pozwala tworzyć katapulty.  -1 do drewna, -1 do żelaza\\\",\\\"production\\\":160,\\\"requires\\\":[\\\"Dzielnica wojskowa\\\",\\\"Inżynier\\\"],\\\"cost\\\":{\\\"stone\\\":40,\\\"wood\\\":40,\\\"iron\\\":20}},{\\\"name\\\":\\\"Inżynier\\\",\\\"desc\\\":\\\"+5 do produkcji\\\",\\\"production\\\":155,\\\"requires\\\":[\\\"Stolarz\\\",\\\"Zakład rzemieślniczy\\\"],\\\"cost\\\":{\\\"stone\\\":20,\\\"wood\\\":20}},{\\\"name\\\":\\\"Kusznicy\\\",\\\"desc\\\":\\\"Pozwala szkolić kuszników\\\",\\\"production\\\":180,\\\"requires\\\":[\\\"Myśliwy\\\",\\\"Zakład rzemieślniczy\\\"],\\\"cost\\\":{\\\"stone\\\":20,\\\"wood\\\":20,\\\"iron\\\":5}},{\\\"name\\\":\\\"Rydwany\\\",\\\"desc\\\":\\\"Pozwala szkolić rydwany\\\",\\\"production\\\":170,\\\"requires\\\":[\\\"Stajnia\\\",\\\"Kowal\\\"],\\\"cost\\\":{\\\"stone\\\":20,\\\"wood\\\":20,\\\"iron\\\":10}},{\\\"name\\\":\\\"Szkoła rycerska\\\",\\\"desc\\\":\\\"Pozwala szkolić rycerzy\\\",\\\"production\\\":140,\\\"requires\\\":[\\\"Stajnia\\\",\\\"Kowal\\\",\\\"Szkoła\\\"],\\\"cost\\\":{\\\"stone\\\":30,\\\"wood\\\":30,\\\"iron\\\":30}},{\\\"name\\\":\\\"Pracownia chemiczna\\\",\\\"desc\\\":\\\"Pozwala otrzymać opierdol od Pani P.\\\",\\\"production\\\":160,\\\"requires\\\":[\\\"Dzielnica wojskowa\\\"],\\\"cost\\\":{\\\"stone\\\":30,\\\"wood\\\":30,\\\"nitre\\\":10}},{\\\"name\\\":\\\"Fabryka armat\\\",\\\"desc\\\":\\\"Pozwala produkować armaty\\\",\\\"production\\\":200,\\\"requires\\\":[\\\"Fabryka\\\",\\\"Pracownia chemiczna\\\",\\\"Warsztat katapult\\\"],\\\"cost\\\":{\\\"stone\\\":40,\\\"wood\\\":40,\\\"nitre\\\":30,\\\"iron\\\":30}}]\");\n\n//# sourceURL=webpack:///./src/json/citybuilding.json?");

/***/ }),

/***/ "./src/json/modifiers.json":
/*!*********************************!*\
  !*** ./src/json/modifiers.json ***!
  \*********************************/
/*! exports provided: forest, stone, iron, horse, sawmill, mine, stonemine, wheat, wheatfield, farm, mineral, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"forest\\\":{\\\"img\\\":\\\"forest\\\",\\\"weight\\\":1},\\\"stone\\\":{\\\"img\\\":\\\"stone\\\"},\\\"iron\\\":{\\\"img\\\":\\\"iron\\\"},\\\"horse\\\":{\\\"img\\\":\\\"horse\\\"},\\\"sawmill\\\":{\\\"img\\\":\\\"sawmill\\\"},\\\"mine\\\":{\\\"img\\\":\\\"mine\\\"},\\\"stonemine\\\":{\\\"img\\\":\\\"stonemine\\\"},\\\"wheat\\\":{\\\"img\\\":\\\"wheat\\\"},\\\"wheatfield\\\":{\\\"img\\\":\\\"wheatfield\\\"},\\\"farm\\\":{\\\"img\\\":\\\"farm\\\"},\\\"mineral\\\":{\\\"img\\\":\\\"mineral\\\"}}\");\n\n//# sourceURL=webpack:///./src/json/modifiers.json?");

/***/ }),

/***/ "./src/json/tiledata.json":
/*!********************************!*\
  !*** ./src/json/tiledata.json ***!
  \********************************/
/*! exports provided: Woda, Ziemia, Ciemnaziemia, Piasek, Skała, Śnieg, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"Woda\\\":{\\\"weight\\\":1,\\\"color\\\":\\\"blue\\\"},\\\"Ziemia\\\":{\\\"weight\\\":1,\\\"color\\\":\\\"green\\\"},\\\"Ciemnaziemia\\\":{\\\"weight\\\":1,\\\"color\\\":\\\"darkgreen\\\"},\\\"Piasek\\\":{\\\"weight\\\":1,\\\"color\\\":\\\"gold\\\"},\\\"Skała\\\":{\\\"weight\\\":2,\\\"color\\\":\\\"gray\\\"},\\\"Śnieg\\\":{\\\"weight\\\":1,\\\"color\\\":\\\"white\\\"}}\");\n\n//# sourceURL=webpack:///./src/json/tiledata.json?");

/***/ }),

/***/ "./src/json/units.json":
/*!*****************************!*\
  !*** ./src/json/units.json ***!
  \*****************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"[{\\\"name\\\":\\\"Osadnik\\\",\\\"desc\\\":\\\"Zakłada nowe miasta\\\",\\\"production\\\":10,\\\"requires\\\":[],\\\"cost\\\":{},\\\"health\\\":1,\\\"defense\\\":0,\\\"attack\\\":0},{\\\"name\\\":\\\"Robotnik\\\",\\\"desc\\\":\\\"Buduje kopalnie na surowcach\\\",\\\"production\\\":20,\\\"requires\\\":[],\\\"cost\\\":{\\\"money\\\":5},\\\"health\\\":1,\\\"defense\\\":0,\\\"attack\\\":0},{\\\"name\\\":\\\"Lucznik\\\",\\\"desc\\\":\\\"Zasięgowa jednostka\\\",\\\"production\\\":100,\\\"requires\\\":[],\\\"cost\\\":{\\\"money\\\":50,\\\"wood\\\":3},\\\"health\\\":10,\\\"defense\\\":2,\\\"attack\\\":5},{\\\"name\\\":\\\"Wojownik\\\",\\\"desc\\\":\\\"Jednostka bliskiego starcia\\\",\\\"production\\\":100,\\\"requires\\\":[],\\\"cost\\\":{\\\"money\\\":50,\\\"wood\\\":3},\\\"health\\\":10,\\\"defense\\\":4,\\\"attack\\\":5},{\\\"name\\\":\\\"Taran\\\",\\\"desc\\\":\\\"Jednostka pomocnicza, zwiększająca obrażenia zadawane murom o 25%\\\",\\\"production\\\":32,\\\"requires\\\":[],\\\"cost\\\":{\\\"iron\\\":10,\\\"wood\\\":20,\\\"money\\\":70},\\\"health\\\":10,\\\"defense\\\":5,\\\"attack\\\":0},{\\\"name\\\":\\\"Docent\\\",\\\"desc\\\":\\\"Doktor wyspecjalizowany w poszukiwaniu minerału Fiutta.\\\",\\\"production\\\":600,\\\"requires\\\":[],\\\"cost\\\":{\\\"iron\\\":80,\\\"wood\\\":120,\\\"stone\\\":100,\\\"money\\\":500},\\\"health\\\":10,\\\"defense\\\":1,\\\"attack\\\":0},{\\\"name\\\":\\\"Katapulta\\\",\\\"desc\\\":\\\"Jednostka oblężnicza.\\\",\\\"production\\\":250,\\\"requires\\\":[],\\\"cost\\\":{\\\"iron\\\":20,\\\"wood\\\":50,\\\"money\\\":100},\\\"health\\\":20,\\\"defense\\\":5,\\\"attack\\\":5},{\\\"name\\\":\\\"Konny\\\",\\\"desc\\\":\\\"Mobilna jednostka lekkiej kawalerii.\\\",\\\"production\\\":32,\\\"requires\\\":[],\\\"cost\\\":{\\\"iron\\\":5,\\\"wood\\\":15,\\\"money\\\":80,\\\"horse\\\":5},\\\"health\\\":15,\\\"defense\\\":9,\\\"attack\\\":10},{\\\"name\\\":\\\"Kusznik\\\",\\\"desc\\\":\\\"Silniejsza wersja łuczników.\\\",\\\"production\\\":200,\\\"requires\\\":[],\\\"cost\\\":{\\\"iron\\\":30,\\\"wood\\\":50,\\\"money\\\":150},\\\"health\\\":15,\\\"defense\\\":5,\\\"attack\\\":10},{\\\"name\\\":\\\"Rydwan\\\",\\\"desc\\\":\\\"Jednostka bliskiego starcia.\\\",\\\"production\\\":250,\\\"requires\\\":[],\\\"cost\\\":{\\\"iron\\\":25,\\\"wood\\\":50,\\\"stone\\\":30,\\\"money\\\":80},\\\"health\\\":20,\\\"defense\\\":4,\\\"attack\\\":9},{\\\"name\\\":\\\"Rycerz\\\",\\\"desc\\\":\\\"Silna i mobilna jednostka bliskiego starcia.\\\",\\\"production\\\":200,\\\"requires\\\":[],\\\"cost\\\":{\\\"iron\\\":40,\\\"wood\\\":20,\\\"money\\\":200},\\\"health\\\":20,\\\"defense\\\":10,\\\"attack\\\":15},{\\\"name\\\":\\\"Armata\\\",\\\"desc\\\":\\\"Jednostka oblężnicza, wymagana przy ataku na miasto posiadające mur.\\\",\\\"production\\\":300,\\\"requires\\\":[],\\\"cost\\\":{\\\"iron\\\":30,\\\"wood\\\":50,\\\"money\\\":100},\\\"health\\\":30,\\\"defense\\\":15,\\\"attack\\\":0}]\");\n\n//# sourceURL=webpack:///./src/json/units.json?");

/***/ })

/******/ });